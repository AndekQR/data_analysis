[{"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\App.js":"1","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\reportWebVitals.js":"2","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\index.js":"3","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\store.js":"4","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\mainPage\\mainPage.jsx":"5","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\services\\DataLoader.service..js":"6","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\appBar\\appBar.jsx":"7","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\theme.jsx":"8","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\reducers\\index.js":"9","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\mapChart\\mapChart.jsx":"10","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\services\\dataUtils.service.js":"11","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\reducers\\progressBar.reducer.js":"12","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\actions\\progressBar.actions.js":"13","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chernoffsFacesChart\\chernoffElements.js":"14","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chartOne\\areaAgeChart.jsx":"15","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\barChart\\myBarChart.jsx":"16","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\populationPyramidChart\\populationPyramidChart.jsx":"17","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chernoffsFacesChart\\chernoffLegend.jsx":"18","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chernoffsFacesChart\\chernoffFace.jsx":"19","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\actions\\chernoffChart.actions.js":"20","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\reducers\\chernoffFaces.reducer.js":"21"},{"size":270,"mtime":1606837608352,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":766,"mtime":1606910810600,"results":"25","hashOfConfig":"23"},{"size":338,"mtime":1608134950578,"results":"26","hashOfConfig":"23"},{"size":2120,"mtime":1611077359624,"results":"27","hashOfConfig":"23"},{"size":693,"mtime":1606842360416,"results":"28","hashOfConfig":"23"},{"size":3180,"mtime":1609145088992,"results":"29","hashOfConfig":"23"},{"size":328,"mtime":1606739030821,"results":"30","hashOfConfig":"23"},{"size":267,"mtime":1611065585839,"results":"31","hashOfConfig":"23"},{"size":5893,"mtime":1611066829924,"results":"32","hashOfConfig":"23"},{"size":12103,"mtime":1611077562061,"results":"33","hashOfConfig":"23"},{"size":443,"mtime":1608130059664,"results":"34","hashOfConfig":"23"},{"size":313,"mtime":1608126516040,"results":"35","hashOfConfig":"23"},{"size":5541,"mtime":1611075586405,"results":"36","hashOfConfig":"23"},{"size":6111,"mtime":1610183866092,"results":"37","hashOfConfig":"23"},{"size":5458,"mtime":1611077359600,"results":"38","hashOfConfig":"23"},{"size":5309,"mtime":1611077359660,"results":"39","hashOfConfig":"23"},{"size":2746,"mtime":1611077359612,"results":"40","hashOfConfig":"23"},{"size":9437,"mtime":1611077359673,"results":"41","hashOfConfig":"23"},{"size":323,"mtime":1611064596218,"results":"42","hashOfConfig":"23"},{"size":540,"mtime":1611065738327,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"rj2yzq",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"47"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"47"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"47"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"47"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"47"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\App.js",["94"],"import \"./App.css\";\nimport MainPage from \"./components/mainPage/mainPage\";\nimport React from \"react\";\nimport MyAppBar from \"./components/appBar/appBar\";\n\n\nfunction App() {\n    return (\n\n        <div>\n            <MainPage/>\n        </div>\n\n    );\n}\n\nexport default App;\n",["95","96"],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\reportWebVitals.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\index.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\store.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\mainPage\\mainPage.jsx",["97","98"],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\services\\DataLoader.service..js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\appBar\\appBar.jsx",["99","100"],"import AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {CloudUpload} from \"@material-ui/icons\";\r\nimport DataLoaderService from \"../../services/DataLoader.service.\";\r\nimport \"./style.scss\"\r\nimport progressBarImage from \"../../assets/progress.gif\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {progressBarActions} from \"../../redux/actions/progressBar.actions\";\r\n\r\nconst MyAppBar = ({setData}) => {\r\n\r\n    let dataLoader = new DataLoaderService()\r\n    const [file, setFile] = useState(null)\r\n    const progressBarState = useSelector(state => state.progressBar)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (file != null) {\r\n            dispatch(progressBarActions.showProgressBar())\r\n            dataLoader.loadData(file)\r\n                .then((value) => {\r\n                    setData(value)\r\n                    dispatch(progressBarActions.hideProgressBar())\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.message)\r\n                    dispatch(progressBarActions.hideProgressBar())\r\n                })\r\n        }\r\n    }, [file])\r\n\r\n    const selectFile = event => {\r\n        dispatch(progressBarActions.showProgressBar())\r\n        setFile(event.target.files[0])\r\n        dispatch(progressBarActions.hideProgressBar())\r\n    }\r\n\r\n    const onCancelInputWindow = () => {\r\n        window.removeEventListener('focus', onCancelInputWindow)\r\n        dispatch(progressBarActions.hideProgressBar())\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"root\"}>\r\n            <AppBar color={\"secondary\"} position=\"static\">\r\n                <Toolbar className={\"toolbar\"}>\r\n                    {(progressBarState.visible === true) &&\r\n                    <img className={\"progressBar\"} src={progressBarImage} alt={\"progress...\"}/>}\r\n                    <div className={\"buttons_container\"}>\r\n                        <input\r\n                            accept=\".csv\"\r\n                            className={\"input\"}\r\n                            id=\"contained-button-file\"\r\n                            type=\"file\"\r\n                            style={{display: \"none\"}}\r\n                            onChange={selectFile}\r\n                        />\r\n                        <label htmlFor=\"contained-button-file\">\r\n                            {file && <span className={\"fileName\"}>{file.name}</span>}\r\n                            <Button onClick={() => {\r\n                                dispatch(progressBarActions.showProgressBar())\r\n                                // window.addEventListener('focus', onCancelInputWindow)\r\n                            }} className={\"button\"} startIcon={<CloudUpload/>} variant=\"contained\"\r\n                                    color={\"primary\"} component=\"span\">\r\n                                Choose data file\r\n                            </Button>\r\n                        </label>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyAppBar","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\theme.jsx",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\reducers\\index.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\mapChart\\mapChart.jsx",["101"],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\services\\dataUtils.service.js",["102","103","104","105","106","107"],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\reducers\\progressBar.reducer.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\actions\\progressBar.actions.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chernoffsFacesChart\\chernoffElements.js",["108","109","110","111","112"],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chartOne\\areaAgeChart.jsx",["113","114","115"],"import React, {useEffect, useState} from \"react\";\r\nimport {Area, AreaChart, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis} from \"recharts\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport \"./style.scss\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {progressBarActions} from \"../../redux/actions/progressBar.actions\";\r\n\r\n/**\r\n * Wyświetla diagram prezentujący zakres wieku w jakim ludzie umierali w określonym roku\r\n *\r\n * @param data - dane pobrane z pliku\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nconst AreaAgeChart = ({dataUtils}) => {\r\n\r\n    const maxAge = 100\r\n\r\n    const [allCountries, setAllCountries] = useState(null)\r\n    //kraj z którego wyświetlane są statystyki w tym wykresie\r\n    const [country, selectCountry] = useState(null)\r\n    const [specificData, setSpecificData] = useState()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (country != null) {\r\n            dispatch(progressBarActions.showProgressBar())\r\n            setSpecificData(getUpdatedData)\r\n        }\r\n    }, [country])\r\n\r\n    useEffect(() => {\r\n        dispatch(progressBarActions.hideProgressBar())\r\n    }, [specificData])\r\n\r\n    useEffect(() => {\r\n        dispatch(progressBarActions.showProgressBar())\r\n        dataUtils.getDistinctsAllCountires().then(data => {\r\n            setAllCountries(data)\r\n            selectCountry(data[0])\r\n            dispatch(progressBarActions.hideProgressBar())\r\n        })\r\n    }, [])\r\n\r\n    /**\r\n     * zwraca wiek od którego ludzie umierją w konkretnym roku (15-24 years, 75+ years)\r\n     *\r\n     * @param ageFromData - rekord z kolumny age z danych\r\n     */\r\n    function getStartAge(ageFromData) {\r\n        let indexOfDash = ageFromData.indexOf('-')\r\n        let result = 0\r\n        if (indexOfDash === -1) {\r\n            let indexOfAddSign = ageFromData.indexOf('+')\r\n            result = Number(ageFromData.substring(0, indexOfAddSign))\r\n        } else {\r\n            result = Number(ageFromData.substring(0, indexOfDash))\r\n        }\r\n        return result\r\n    }\r\n\r\n    function getEndAge(ageFromData) {\r\n        let indexOfDash = ageFromData.indexOf('-')\r\n        let result = 0\r\n        if (indexOfDash === -1) {\r\n            result = maxAge\r\n        } else {\r\n            let indexOfSpace = ageFromData.indexOf(' ')\r\n            result = Number(ageFromData.substring(indexOfDash + 1, indexOfSpace))\r\n        }\r\n        return result\r\n    }\r\n\r\n\r\n    /**\r\n     * zwraca wartość średnią początkowej wartości wieku w którym umierali ludzie\r\n     * z wybranego roku i kraju\r\n     * @param year\r\n     * @param country\r\n     */\r\n    function getAverageStartAge(year, country) {\r\n        let result = 0\r\n        const filteredData = dataUtils.data.filter(object => (\r\n            object.year === year && object.country === country\r\n        ))\r\n        filteredData.forEach(object => {\r\n            result = result + getStartAge(object.age)\r\n        })\r\n        return result / filteredData.length\r\n    }\r\n\r\n    function getAverageEndAge(year, country) {\r\n        let result = 0\r\n        const filteredData = dataUtils.data.filter(object => (\r\n            object.year === year && object.country === country\r\n        ))\r\n        filteredData.forEach(object => {\r\n            result = result + getEndAge(object.age)\r\n        })\r\n        return result / filteredData.length\r\n    }\r\n\r\n    function getUpdatedData() {\r\n        return dataUtils.data\r\n            .filter(object => (\r\n                object.country === country\r\n            ))\r\n            .map(object => {\r\n                return {\r\n                    year: object.year,\r\n                    ageRange: [\r\n                        getAverageStartAge(object.year, object.country),\r\n                        getAverageEndAge(object.year, object.country)\r\n                    ]\r\n                }\r\n            })\r\n            .sort(compare)\r\n    }\r\n\r\n    function compare(a, b) {\r\n        if (a.year > b.year) return 1\r\n        else if (b.year > a.year) return -1\r\n        return 0;\r\n    }\r\n\r\n    async function changeCountry(country) {\r\n        selectCountry(country)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"chartOne\"}>\r\n            {country &&\r\n            <div className={\"container\"}>\r\n                <div className={\"header\"}>\r\n                    <div className={\"selectClass\"}>\r\n                        <InputLabel id={\"selectLabel\"}>Choose country:</InputLabel>\r\n                        <Select\r\n                            labelId={\"selectLabel\"}\r\n                            value={country}\r\n                            onChange={(event => changeCountry(event.target.value))}\r\n                        >\r\n                            {allCountries.map(country => (\r\n                                <MenuItem key={country} value={country}>{country}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </div>\r\n                    <span className={\"chartTitle\"}>The range of age at which people committed suicide</span>\r\n                </div>\r\n                <div className={\"chartDiv\"}>\r\n                    <ResponsiveContainer width={\"95%\"} height={400}>\r\n                        <AreaChart\r\n                            data={specificData}\r\n                            margin={{\r\n                                top: 20, right: 20, bottom: 20, left: 20,\r\n                            }}>\r\n                            <XAxis dataKey={\"year\"} label={{value: 'Year', angle: 0, position: 'bottom'}}/>\r\n                            <YAxis label={{value: 'Range', angle: -90, position: 'left'}}/>\r\n                            <Area name={\"Age range\"} dataKey=\"ageRange\" stroke=\"#8884d8\" fill=\"#8884d8\"/>\r\n                            <Tooltip/>\r\n                            <Legend  align={\"left\"}/>\r\n                        </AreaChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AreaAgeChart;","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\barChart\\myBarChart.jsx",["116","117","118","119","120","121"],"import \"./style.scss\"\r\nimport React, {useEffect, useState} from \"react\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, XAxis, YAxis} from \"recharts\";\r\nimport {Tooltip} from \"@material-ui/core\";\r\nimport {progressBarActions} from \"../../redux/actions/progressBar.actions\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n/**\r\n *\r\n * @param {DataUtils} dataLoader:\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nconst MyBarChart = ({dataUtils}) => {\r\n\r\n    const dataSubjects = ['suicides', 'population', 'suicides / 100k population']\r\n    const [countryInput, setCountryInput] = useState(null)\r\n    const [dataSubject, setDataSubject] = useState(dataSubjects[0])\r\n    const [allCountries, setAllCountries] = useState([])\r\n    const [yearsByCountry, setYearsByCountry] = useState([])\r\n    const [data, setData] = useState([])\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(progressBarActions.showProgressBar())\r\n        dataUtils.getDistinctsAllCountires().then((countries) => {\r\n            setCountryInput(countries[0])\r\n            setAllCountries(countries)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (countryInput != null) {\r\n            dataUtils.getDistinctAllYearsByCountry(countryInput).then((years) => {\r\n                setYearsByCountry(years)\r\n            })\r\n        }\r\n    }, [countryInput])\r\n\r\n    useEffect(() => {\r\n        let tmpData = []\r\n        switch (dataSubject) {\r\n            case dataSubjects[0]: {\r\n                yearsByCountry.forEach(value => {\r\n                    let tmp = dataUtils.getAllDeaths(countryInput, value)\r\n                    tmpData.push({\r\n                        name: value,\r\n                        value: tmp\r\n                    })\r\n                })\r\n                setData(tmpData)\r\n                break;\r\n            }\r\n            case dataSubjects[1]: {\r\n                yearsByCountry.forEach(value => {\r\n                    let tmp = dataUtils.getPopulationByCountryAndYear(countryInput, value)\r\n                    tmpData.push({\r\n                        name: value,\r\n                        value: tmp\r\n                    })\r\n                })\r\n                setData(tmpData)\r\n                break;\r\n            }\r\n            case dataSubjects[2]: {\r\n                yearsByCountry.forEach(value => {\r\n                    let tmp = dataUtils.getSuicides_100k_population(countryInput, value)\r\n                    tmpData.push({\r\n                        name: value,\r\n                        value: tmp\r\n                    })\r\n                })\r\n                setData(tmpData)\r\n                break;\r\n            }\r\n        }\r\n        dispatch(progressBarActions.hideProgressBar())\r\n    }, [yearsByCountry, dataSubject])\r\n\r\n\r\n    return (\r\n        <div className={\"barChart\"}>\r\n            {(countryInput && allCountries.length > 0 && dataSubject) &&\r\n            <div className={\"container\"}>\r\n                <div className={\"controls\"}>\r\n                    <div className={\"header\"}>\r\n                        <div>\r\n                            <InputLabel id={\"selectLabel\"}>Choose country:</InputLabel>\r\n                            <Select\r\n                                labelId={\"selectLabel\"}\r\n                                value={countryInput}\r\n                                onChange={(event => setCountryInput(event.target.value))}\r\n                            >\r\n                                {allCountries.map(country => (\r\n                                    <MenuItem key={country} value={country}>{country}</MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </div>\r\n                        <div>\r\n                            <InputLabel id={\"selectLabel1\"}>Choose data subject:</InputLabel>\r\n                            <Select\r\n                                labelId={\"selectLabel1\"}\r\n                                value={dataSubject}\r\n                                onChange={(event => setDataSubject(event.target.value))}\r\n                            >\r\n                                {dataSubjects.map(element => (\r\n                                    <MenuItem key={element} value={element}>{element}</MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </div>\r\n                        <span className={\"title\"}>Values of specified indicator in each year</span>\r\n                    </div>\r\n                </div>\r\n                <div className={\"chart\"}>\r\n                    <ResponsiveContainer width={\"95%\"} height={500}>\r\n                        <BarChart data={data}\r\n                                  margin={{\r\n                            top: 20, right: 20, bottom: 20, left: 20,\r\n                        }}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <XAxis dataKey=\"name\" label={{value: \"Year\", angle: 0, position: 'bottom'}}/>\r\n                            <YAxis label={{value: \"Value\", angle: -90, position: 'left'}}/>\r\n                            <Bar dataKey=\"value\" fill=\"#8884d8\"/>\r\n                        </BarChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyBarChart","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\populationPyramidChart\\populationPyramidChart.jsx",["122","123"],"import \"./style.scss\"\r\nimport React, {useEffect, useState} from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {progressBarActions} from \"../../redux/actions/progressBar.actions\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nconst PopulationPyramidChart = ({dataUtils}) => {\r\n\r\n    const sex = ['male', 'female']\r\n    const [categories, setCategories] = useState([])\r\n    const [yearInput, setYearInput] = useState()\r\n    const [countryInput, setCountryInput] = useState()\r\n    const [allCountries, setAllCountries] = useState([])\r\n    const [yearsByCountry, setYearsByCountry] = useState([])\r\n    const [data, setData] = useState({\r\n        maleData: [],\r\n        femaleData: []\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(progressBarActions.showProgressBar())\r\n        const ranges = dataUtils.getAllAgeRangesAsString()\r\n        setCategories(ranges)\r\n        dataUtils.getDistinctsAllCountires().then(countries => {\r\n            setAllCountries(countries)\r\n            const firstCountry = countries[0]\r\n            setCountryInput(firstCountry)\r\n            dataUtils.getDistinctAllYearsByCountry(firstCountry).then(years => {\r\n                setYearsByCountry(years)\r\n                setYearInput(years[0]);\r\n                dispatch(progressBarActions.hideProgressBar())\r\n            })\r\n        })\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        let tmpMaleData = []\r\n        let tmpFemaleData = []\r\n        categories.forEach(category => {\r\n            const malePopulation = dataUtils.getPopulation(countryInput, yearInput, sex[0], category)\r\n            const femalePopulation = dataUtils.getPopulation(countryInput, yearInput, sex[1], category)\r\n            tmpMaleData.push(-(Number(malePopulation))) //bo słupki idą w lewą stronę\r\n            tmpFemaleData.push(Number(femalePopulation))\r\n        })\r\n        setData({\r\n            maleData: tmpMaleData,\r\n            femaleData: tmpFemaleData\r\n        })\r\n    }, [categories, countryInput, yearInput]);\r\n\r\n\r\n    const options = {\r\n        chart: {\r\n            type: 'bar'\r\n        },\r\n        title: {\r\n            text: 'Population pyramid'\r\n        },\r\n        xAxis: [{\r\n            categories: categories,\r\n            reversed: false,\r\n            labels: {\r\n                step: 1\r\n            }\r\n        }, {\r\n            opposite: true,\r\n            reversed: false,\r\n            categories: categories,\r\n            linkedTo: 0,\r\n            labels: {\r\n                step: 1\r\n            }\r\n        }],\r\n        yAxis: {\r\n            title: {\r\n                text: null\r\n            },\r\n            labels: {\r\n                formatter: function () {\r\n                    return Math.abs(this.value);\r\n                }\r\n            }\r\n        },\r\n\r\n        plotOptions: {\r\n            series: {\r\n                stacking: 'normal'\r\n            }\r\n        },\r\n\r\n        tooltip: {\r\n            formatter: function () {\r\n                return '<b>' + this.series.name + ', age ' + this.point.category + '</b><br/>' +\r\n                    'Population: ' + Highcharts.numberFormat(Math.abs(this.point.y), 1);\r\n            }\r\n        },\r\n\r\n        series: [{\r\n            name: 'Male',\r\n            data: data.maleData\r\n        }, {\r\n            name: 'Female',\r\n            data: data.femaleData\r\n        }]\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"populationPyramidChart\"}>\r\n            {(countryInput && yearInput && data) &&\r\n            <div className={\"container\"}>\r\n                <div className={\"controls\"}>\r\n                    <div>\r\n                        <InputLabel id={\"selectLabel\"}>Choose country:</InputLabel>\r\n                        <Select\r\n                            labelId={\"selectLabel\"}\r\n                            value={countryInput}\r\n                            onChange={(event => setCountryInput(event.target.value))}\r\n                        >\r\n                            {allCountries.map(country => (\r\n                                <MenuItem key={country} value={country}>{country}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </div>\r\n                    <div>\r\n                        <InputLabel id={\"selectLabel\"}>Choose year:</InputLabel>\r\n                        <Select\r\n                            labelId={\"selectLabel\"}\r\n                            value={yearInput}\r\n                            onChange={(event => setYearInput(event.target.value))}\r\n                        >\r\n                            {yearsByCountry.map(year => (\r\n                                <MenuItem key={year} value={year}>{year}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </div>\r\n                </div>\r\n                <div className={\"chart\"}>\r\n                    <HighchartsReact\r\n                        highcharts={Highcharts}\r\n                        options={options}\r\n                    />\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PopulationPyramidChart","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chernoffsFacesChart\\chernoffLegend.jsx",["124","125"],"import React, {useEffect, useRef} from 'react'\r\nimport \"./style.scss\"\r\nimport {ChernoffElements} from \"./chernoffElements\";\r\n\r\nconst ChernoffLegend = ({getCoordinates}) => {\r\n\r\n    const canvasRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        drawLegend()\r\n    }, []);\r\n\r\n\r\n    function drawLegend() {\r\n        const dynamicCanvas = canvasRef.current\r\n        if (dynamicCanvas == null) return null\r\n        const ctx = dynamicCanvas.getContext('2d')\r\n        dynamicCanvas.height = 250\r\n        dynamicCanvas.width = 500\r\n\r\n        ctx.clearRect(0, 0, dynamicCanvas.width, dynamicCanvas.height);\r\n\r\n\r\n        ctx.fillText(\"Ratio of the number of suicides to the world average between 0.7 and 1.3\", 10, 10)\r\n        ChernoffElements.drawEyes(ctx, 330, -8, 1)\r\n        ctx.fillText(\"Ratio of the number of suicides to the world average grater than 1.3\", 10, 25)\r\n        ChernoffElements.drawEyes(ctx, 310, 5, 2)\r\n        ctx.fillText(\"Ratio of the number of suicides to the world average lower than 0.7\", 10, 40)\r\n        ChernoffElements.drawEyes(ctx, 310, 23, 3)\r\n\r\n        ctx.fillText(\"Ratio of the population to the world average between 0.7 and 1.3\", 10, 60)\r\n        ChernoffElements.drawNose(ctx, 290, 35, 1)\r\n        ctx.fillText(\"Ratio of the population to the world average grater than 1.3\", 10, 75)\r\n        ChernoffElements.drawNose(ctx, 280, 48, 2)\r\n        ctx.fillText(\"Ratio of the population to the world average lower than 0.7\", 10, 90)\r\n        ChernoffElements.drawNose(ctx, 280, 61, 3)\r\n\r\n        ctx.fillText(\"Ratio of the suicides per 100k of population to the world average between 0.7 and 1.3\", 10, 110)\r\n        ChernoffElements.drawMouth(ctx, 390, 70, 1)\r\n        ctx.fillText(\"Ratio of the suicides per 100k of population to the world average grater than 1.3\", 10, 125)\r\n        ChernoffElements.drawMouth(ctx, 370, 83, 2)\r\n        ctx.fillText(\"Ratio of the suicides per 100k of population to the world average lower than 0.7\", 10, 140)\r\n        ChernoffElements.drawMouth(ctx, 370, 96, 3)\r\n\r\n        ctx.fillText(\"Age between 25 and 55\", 10, 160)\r\n        ChernoffElements.drawEyebrow(ctx, 120, 145, 1)\r\n        ctx.fillText(\"Age between 0 and 25\", 10, 175)\r\n        ChernoffElements.drawEyebrow(ctx, 110, 165, 2)\r\n        ctx.fillText(\"Age greater than 55\", 10, 190)\r\n        ChernoffElements.drawEyebrow(ctx, 100, 180, 3)\r\n\r\n        ctx.fillText(\"Male\", 10, 230)\r\n        ChernoffElements.drawHead(ctx, 40, 200, 1)\r\n\r\n        ctx.fillText(\"Female\", 90, 230)\r\n        ChernoffElements.drawHead(ctx, 130, 200, 2)\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={\"chernoffLegend container\"}>\r\n            <canvas className={\"canvas\"} ref={canvasRef}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChernoffLegend","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chernoffsFacesChart\\chernoffFace.jsx",["126","127","128","129","130"],"import \"./style.scss\"\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ChernoffElements} from \"./chernoffElements\";\r\nimport ChernoffLegend from \"./chernoffLegend\";\r\n\r\nconst ChernoffFace = ({dataUtils}) => {\r\n\r\n    const upperLimit = 1.3\r\n    const downLimit = 0.7\r\n\r\n    const [data, setData] = useState(null)\r\n    const dispatch = useDispatch()\r\n    const parameters = ['sex', 'age', 'suicides_no', 'population', 'suicides_k_pop']\r\n    const canvasRef = useRef(null)\r\n    const [dimension, setDimension] = useState([\r\n        window.innerWidth,\r\n        window.innerHeight,\r\n    ]);\r\n    const [containerDiv, setContainerDiv] = useState()\r\n\r\n    const chernoffState = useSelector(state => state.chernoffFaces);\r\n\r\n    useEffect(() => {\r\n        if (chernoffState !== undefined && chernoffState != null && chernoffState.visible === true) {\r\n            dataUtils.getAverageMaleFemaleData(chernoffState.country, chernoffState.year).then((elements) => {\r\n                setData(elements)\r\n            })\r\n        }\r\n    }, [chernoffState.visible, chernoffState.country, chernoffState.year])\r\n\r\n    useEffect(() => {\r\n        if (data != null) {\r\n            drawFaces()\r\n        }\r\n        setContainerDiv(document.getElementsByClassName('container')[0])\r\n    }, [data])\r\n\r\n    useEffect(() => {\r\n        if (containerDiv !== undefined) {\r\n            const debouncedResizeHandler = debounce(() => {\r\n                setDimension([containerDiv.clientWidth, containerDiv.clientHeight]);\r\n            }, 80);\r\n            window.addEventListener('resize', debouncedResizeHandler);\r\n        }\r\n\r\n    }, [containerDiv])\r\n\r\n    useEffect(() => {\r\n        drawFaces()\r\n    }, [dimension])\r\n\r\n\r\n    function debounce(fn, ms) {\r\n        let timer;\r\n        return _ => {\r\n            clearTimeout(timer);\r\n            timer = setTimeout(_ => {\r\n                timer = null;\r\n                fn.apply(this, arguments);\r\n            }, ms);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Funkcja rysująca twarze,\r\n     * brane pod uwagę są sex, age, suiciedes_no, population, suiciedes/100k pop\r\n     * @param data\r\n     */\r\n    async function drawFaces() {\r\n\r\n        const dynamicCanvas = canvasRef.current\r\n        if (dynamicCanvas == null) return null\r\n        const ctx = dynamicCanvas.getContext('2d')\r\n        dynamicCanvas.height = containerDiv.clientHeight\r\n        dynamicCanvas.width = containerDiv.clientWidth\r\n\r\n        ctx.clearRect(0, 0, dynamicCanvas.width, dynamicCanvas.height);\r\n\r\n        ctx.scale(5, 5)\r\n\r\n        let maleCoordinates = getCoordinates(0, 2, dynamicCanvas.width, dynamicCanvas.height)\r\n        drawFace(ctx,\r\n            /*x*/maleCoordinates[0], /*y*/maleCoordinates[1],\r\n            /*head*/await getType(parameters[0], data.male.sex, \"male\"),\r\n            /*eyebrow*/await getType(parameters[1], data.male.age, \"male\"),\r\n            /*eyes*/await getType(parameters[2], data.male.suicides_no, \"male\"),\r\n            /*nose*/await getType(parameters[3], data.male.population, \"male\"),\r\n            /*mouth*/await getType(parameters[4], data.male.suicides_k_pop, \"male\"));\r\n\r\n        let femaleCoordinates = getCoordinates(1, 2, dynamicCanvas.width, dynamicCanvas.height)\r\n        drawFace(ctx,\r\n            /*x*/femaleCoordinates[0], /*y*/femaleCoordinates[1],\r\n            /*head*/await getType(parameters[0], data.female.sex, \"female\"),\r\n            /*eyebrow*/await getType(parameters[1], data.female.age, \"female\"),\r\n            /*eyes*/await getType(parameters[2], data.female.suicides_no, \"female\"),\r\n            /*nose*/await getType(parameters[3], data.female.population, \"female\"),\r\n            /*mouth*/await getType(parameters[4], data.female.suicides_k_pop, \"female\"));\r\n\r\n\r\n        return ctx\r\n    }\r\n\r\n\r\n    /**\r\n     * zwraca pozycje do narysowania twarzy\r\n     * @param currentElementIndex - indeks aktualnie rysowanej twarzy\r\n     * @param allElementsLenght - liczba wszystkich twarzy do narysowania\r\n     * @param width - szerokość powierzchni rysowania\r\n     * @param height - wysokość powierzchni rysowania\r\n     * @returns {number[]}\r\n     */\r\n    function getCoordinates(currentElementIndex, allElementsLenght, width, height) {\r\n        const oneElementSize = [55, 100]\r\n        const elementsInRow = Math.round(width / (oneElementSize[0] + 20))\r\n        const rows = Math.ceil(allElementsLenght / elementsInRow)\r\n        let currentElement = currentElementIndex + 1\r\n        let iteratedElements = 1\r\n        for (let i = 1; i <= rows; i++) { //rows\r\n            for (let j = 1; j <= elementsInRow; j++) { //columns\r\n                if (iteratedElements === currentElement) {\r\n                    return [j * oneElementSize[0] - 50, i * oneElementSize[1] - 80]\r\n                }\r\n                iteratedElements++\r\n            }\r\n        }\r\n        return [0, 0]\r\n    }\r\n\r\n    /**\r\n     * Funkcja rysująca jedną twarz.\r\n     * @param {CanvasRenderingContext2D} ctx\r\n     * @param {number} x - Współrzędna X na mapie.\r\n     * @param {number} y - Współrzędna Y na mapie.\r\n     * @param {number} headType - Typ twarzy (1, 2, 3).\r\n     * @param {number} eyebrowType - Typ brwi (1, 2, 3).\r\n     * @param {number} eyesType - Typ oczu (1, 2, 3).\r\n     * @param {number} noseType - Typ nosa (1, 2, 3).\r\n     * @param {number} mouthType - Typ ust (1, 2, 3).\r\n     */\r\n    function drawFace(ctx, x, y, headType, eyebrowType, eyesType, noseType, mouthType) {\r\n        ChernoffElements.drawHead(ctx, x, y, headType);\r\n        ChernoffElements.drawEyebrow(ctx, x, y, eyebrowType);\r\n        ChernoffElements.drawEyes(ctx, x, y, eyesType);\r\n        ChernoffElements.drawNose(ctx, x, y, noseType);\r\n        ChernoffElements.drawMouth(ctx, x, y, mouthType);\r\n    }\r\n\r\n\r\n    /**\r\n     * funkcja wyznacza numer przedziału do któej należy @parameterValue\r\n     * @param parameterName - nazwa kolumny ze zbioru danych\r\n     * @param parameterValue - wartość komórki w wybranej kolumnie oraz aktualnie przetwarzanym wierszu\r\n     */\r\n    async function getType(parameterName, parameterValue, sex) {\r\n        const worldDataAverage = await dataUtils.getAverageMaleFemaleDataForAllCountries(chernoffState.year)\r\n\r\n        switch (parameterName) {\r\n            case /*sex=head*/\r\n            parameters[0]: {\r\n                if (parameterValue === 'male') return 1\r\n                else return 2\r\n            }\r\n            case /*age=eyebrow*/\r\n            parameters[1]: {\r\n                // const age = dataUtils.parseAge(parameterValue)\r\n                const age = parameterValue\r\n                if (age != null) {\r\n                    if (age.length === 2) {\r\n                        if (age[0] > 0 && age[1] < 25) return 2\r\n                        if (age[0] > 25 && age[1] < 55) return 1\r\n                    } else {\r\n                        return 3\r\n                    }\r\n                }\r\n                return 2\r\n            }\r\n            case /*suicides_no=eyes*/\r\n            parameters[2]: {\r\n                let localToWorldSuicides = 0\r\n                if (sex === \"male\") {\r\n                    localToWorldSuicides = data.male.suicides_no / worldDataAverage.male.suicides_no\r\n                } else {\r\n                    localToWorldSuicides = data.male.suicides_no / worldDataAverage.female.suicides_no\r\n                }\r\n                if (localToWorldSuicides < downLimit) return 3\r\n                if (localToWorldSuicides >= downLimit && localToWorldSuicides < upperLimit) return 1\r\n                if (localToWorldSuicides >= upperLimit) return 2\r\n                return 3\r\n\r\n            }\r\n            case /*population=nose*/\r\n            parameters[3]: {\r\n                let localToWorldPopulation = 0\r\n                if (sex === \"male\") {\r\n                    localToWorldPopulation = data.male.population / worldDataAverage.male.population\r\n                } else {\r\n                    localToWorldPopulation = data.male.population / worldDataAverage.female.population\r\n                }\r\n                if (localToWorldPopulation < downLimit) return 3\r\n                if (localToWorldPopulation >= downLimit && localToWorldPopulation < upperLimit) return 1\r\n                if (localToWorldPopulation >= upperLimit) return 2\r\n                return 3\r\n\r\n            }\r\n            case /*suicides_k_pop=mouth*/\r\n            parameters[4]: {\r\n                let localToWorldSuicides_k_pop = 0\r\n                if (sex === \"male\") {\r\n                    localToWorldSuicides_k_pop = data.male.suicides_k_pop / worldDataAverage.male.suicides_k_pop\r\n                } else {\r\n                    localToWorldSuicides_k_pop = data.male.suicides_k_pop / worldDataAverage.female.suicides_k_pop\r\n                }\r\n\r\n                if (localToWorldSuicides_k_pop < downLimit) return 3\r\n                if (localToWorldSuicides_k_pop >= downLimit && localToWorldSuicides_k_pop < upperLimit) return 1\r\n                if (localToWorldSuicides_k_pop >= upperLimit) return 2\r\n                return 3\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"chernoff\"}>\r\n            {(data) &&\r\n            <div className={\"container\"} style={{height: '500px'}}>\r\n                <canvas className={\"canvas\"} ref={canvasRef}/>\r\n            </div>}\r\n            <ChernoffLegend getCoordinates={getCoordinates}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChernoffFace","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\actions\\chernoffChart.actions.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\reducers\\chernoffFaces.reducer.js",[],{"ruleId":"131","severity":1,"message":"132","line":4,"column":8,"nodeType":"133","messageId":"134","endLine":4,"endColumn":16},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":28,"column":8,"nodeType":"141","endLine":28,"endColumn":14,"suggestions":"142"},{"ruleId":"139","severity":1,"message":"140","line":32,"column":8,"nodeType":"141","endLine":32,"endColumn":19,"suggestions":"143"},{"ruleId":"139","severity":1,"message":"144","line":32,"column":8,"nodeType":"141","endLine":32,"endColumn":14,"suggestions":"145"},{"ruleId":"131","severity":1,"message":"146","line":43,"column":45,"nodeType":"133","messageId":"134","endLine":43,"endColumn":64},{"ruleId":"139","severity":1,"message":"147","line":44,"column":8,"nodeType":"141","endLine":44,"endColumn":10,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":75,"column":101,"nodeType":"151","messageId":"152","endLine":75,"endColumn":103},{"ruleId":"149","severity":1,"message":"150","line":90,"column":97,"nodeType":"151","messageId":"152","endLine":90,"endColumn":99},{"ruleId":"149","severity":1,"message":"150","line":99,"column":97,"nodeType":"151","messageId":"152","endLine":99,"endColumn":99},{"ruleId":"149","severity":1,"message":"150","line":114,"column":101,"nodeType":"151","messageId":"152","endLine":114,"endColumn":103},{"ruleId":"149","severity":1,"message":"150","line":162,"column":88,"nodeType":"151","messageId":"152","endLine":162,"endColumn":90},{"ruleId":"149","severity":1,"message":"150","line":321,"column":30,"nodeType":"151","messageId":"152","endLine":321,"endColumn":32},{"ruleId":"153","severity":1,"message":"154","line":20,"column":5,"nodeType":"155","messageId":"156","endLine":33,"endColumn":6},{"ruleId":"153","severity":1,"message":"154","line":47,"column":5,"nodeType":"155","messageId":"156","endLine":57,"endColumn":6},{"ruleId":"153","severity":1,"message":"154","line":70,"column":5,"nodeType":"155","messageId":"156","endLine":80,"endColumn":6},{"ruleId":"153","severity":1,"message":"154","line":98,"column":5,"nodeType":"155","messageId":"156","endLine":109,"endColumn":6},{"ruleId":"153","severity":1,"message":"154","line":124,"column":5,"nodeType":"155","messageId":"156","endLine":149,"endColumn":6},{"ruleId":"139","severity":1,"message":"157","line":33,"column":8,"nodeType":"141","endLine":33,"endColumn":17,"suggestions":"158"},{"ruleId":"139","severity":1,"message":"140","line":37,"column":8,"nodeType":"141","endLine":37,"endColumn":22,"suggestions":"159"},{"ruleId":"139","severity":1,"message":"160","line":46,"column":8,"nodeType":"141","endLine":46,"endColumn":10,"suggestions":"161"},{"ruleId":"131","severity":1,"message":"162","line":6,"column":39,"nodeType":"133","messageId":"134","endLine":6,"endColumn":45},{"ruleId":"131","severity":1,"message":"163","line":7,"column":9,"nodeType":"133","messageId":"134","endLine":7,"endColumn":16},{"ruleId":"139","severity":1,"message":"160","line":34,"column":8,"nodeType":"141","endLine":34,"endColumn":10,"suggestions":"164"},{"ruleId":"139","severity":1,"message":"165","line":42,"column":8,"nodeType":"141","endLine":42,"endColumn":22,"suggestions":"166"},{"ruleId":"153","severity":1,"message":"154","line":46,"column":9,"nodeType":"155","messageId":"156","endLine":80,"endColumn":10},{"ruleId":"139","severity":1,"message":"167","line":82,"column":8,"nodeType":"141","endLine":82,"endColumn":37,"suggestions":"168"},{"ruleId":"139","severity":1,"message":"160","line":40,"column":8,"nodeType":"141","endLine":40,"endColumn":10,"suggestions":"169"},{"ruleId":"139","severity":1,"message":"170","line":57,"column":8,"nodeType":"141","endLine":57,"endColumn":45,"suggestions":"171"},{"ruleId":"131","severity":1,"message":"172","line":7,"column":11,"nodeType":"133","messageId":"134","endLine":7,"endColumn":29},{"ruleId":"131","severity":1,"message":"173","line":19,"column":15,"nodeType":"133","messageId":"134","endLine":19,"endColumn":24},{"ruleId":"131","severity":1,"message":"174","line":13,"column":11,"nodeType":"133","messageId":"134","endLine":13,"endColumn":19},{"ruleId":"139","severity":1,"message":"175","line":30,"column":8,"nodeType":"141","endLine":30,"endColumn":74,"suggestions":"176"},{"ruleId":"139","severity":1,"message":"177","line":37,"column":8,"nodeType":"141","endLine":37,"endColumn":14,"suggestions":"178"},{"ruleId":"139","severity":1,"message":"177","line":51,"column":8,"nodeType":"141","endLine":51,"endColumn":19,"suggestions":"179"},{"ruleId":"153","severity":1,"message":"154","line":158,"column":9,"nodeType":"155","messageId":"156","endLine":220,"endColumn":10},"no-unused-vars","'MyAppBar' is defined but never used.","Identifier","unusedVar","no-native-reassign",["180"],"no-negated-in-lhs",["181"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["182"],["183"],"React Hook useEffect has missing dependencies: 'dataLoader', 'dispatch', and 'setData'. Either include them or remove the dependency array. If 'setData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["184"],"'onCancelInputWindow' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dataUtils', 'dispatch', and 'getColorScale'. Either include them or remove the dependency array.",["185"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'dispatch' and 'getUpdatedData'. Either include them or remove the dependency array.",["186"],["187"],"React Hook useEffect has missing dependencies: 'dataUtils' and 'dispatch'. Either include them or remove the dependency array.",["188"],"'Legend' is defined but never used.","'Tooltip' is defined but never used.",["189"],"React Hook useEffect has a missing dependency: 'dataUtils'. Either include it or remove the dependency array.",["190"],"React Hook useEffect has missing dependencies: 'countryInput', 'dataSubjects', 'dataUtils', and 'dispatch'. Either include them or remove the dependency array.",["191"],["192"],"React Hook useEffect has missing dependencies: 'dataUtils' and 'sex'. Either include them or remove the dependency array.",["193"],"'numberOfProperties' is assigned a value but never used.","'container' is assigned a value but never used.","'dispatch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'chernoffState' and 'dataUtils'. Either include them or remove the dependency array.",["194"],"React Hook useEffect has a missing dependency: 'drawFaces'. Either include it or remove the dependency array.",["195"],["196"],"no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"199","fix":"209"},{"desc":"199","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"199","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},"Update the dependencies array to be: [data, dispatch]",{"range":"224","text":"225"},"Update the dependencies array to be: [dataUtils, dispatch]",{"range":"226","text":"227"},"Update the dependencies array to be: [dataLoader, dispatch, file, setData]",{"range":"228","text":"229"},"Update the dependencies array to be: [dataUtils, dispatch, getColorScale]",{"range":"230","text":"231"},"Update the dependencies array to be: [country, dispatch, getUpdatedData]",{"range":"232","text":"233"},"Update the dependencies array to be: [dispatch, specificData]",{"range":"234","text":"235"},{"range":"236","text":"227"},{"range":"237","text":"227"},"Update the dependencies array to be: [countryInput, dataUtils]",{"range":"238","text":"239"},"Update the dependencies array to be: [yearsByCountry, dataSubject, dispatch, dataSubjects, dataUtils, countryInput]",{"range":"240","text":"241"},{"range":"242","text":"227"},"Update the dependencies array to be: [categories, countryInput, dataUtils, sex, yearInput]",{"range":"243","text":"244"},"Update the dependencies array to be: [chernoffState.visible, chernoffState.country, chernoffState.year, chernoffState, dataUtils]",{"range":"245","text":"246"},"Update the dependencies array to be: [data, drawFaces]",{"range":"247","text":"248"},"Update the dependencies array to be: [dimension, drawFaces]",{"range":"249","text":"250"},[1035,1041],"[data, dispatch]",[1132,1143],"[dataUtils, dispatch]",[1265,1271],"[dataLoader, dispatch, file, setData]",[1790,1792],"[dataUtils, dispatch, getColorScale]",[1152,1161],"[country, dispatch, getUpdatedData]",[1252,1266],"[dispatch, specificData]",[1561,1563],[1291,1293],[1518,1532],"[countryInput, dataUtils]",[2894,2923],"[yearsByCountry, dataSubject, dispatch, dataSubjects, dataUtils, countryInput]",[1578,1580],[2194,2231],"[categories, countryInput, dataUtils, sex, yearInput]",[1099,1165],"[chernoffState.visible, chernoffState.country, chernoffState.year, chernoffState, dataUtils]",[1339,1345],"[data, drawFaces]",[1746,1757],"[dimension, drawFaces]"]