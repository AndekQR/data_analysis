[{"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\App.js":"1","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\reportWebVitals.js":"2","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\index.js":"3","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\store.js":"4","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\mainPage\\mainPage.jsx":"5","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\services\\DataLoader.service..js":"6","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\appBar\\appBar.jsx":"7","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\theme.jsx":"8","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\reducers\\index.js":"9","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\mapChart\\mapChart.jsx":"10","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\services\\dataUtils.service.js":"11","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\reducers\\progressBar.reducer.js":"12","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\actions\\progressBar.actions.js":"13","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chernoffsFacesChart\\chernoffsFacesChart.jsx":"14","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chernoffsFacesChart\\chernoffElements.js":"15","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chartOne\\areaAgeChart.jsx":"16","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\barChart\\myBarChart.jsx":"17","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\populationPyramidChart\\populationPyramidChart.jsx":"18"},{"size":270,"mtime":1606837608352,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":766,"mtime":1606910810600,"results":"22","hashOfConfig":"20"},{"size":338,"mtime":1608134950578,"results":"23","hashOfConfig":"20"},{"size":2105,"mtime":1609340813101,"results":"24","hashOfConfig":"20"},{"size":693,"mtime":1606842360416,"results":"25","hashOfConfig":"20"},{"size":3180,"mtime":1609145088992,"results":"26","hashOfConfig":"20"},{"size":328,"mtime":1606739030821,"results":"27","hashOfConfig":"20"},{"size":191,"mtime":1608126884146,"results":"28","hashOfConfig":"20"},{"size":5609,"mtime":1609145088884,"results":"29","hashOfConfig":"20"},{"size":6043,"mtime":1609340859727,"results":"30","hashOfConfig":"20"},{"size":443,"mtime":1608130059664,"results":"31","hashOfConfig":"20"},{"size":313,"mtime":1608126516040,"results":"32","hashOfConfig":"20"},{"size":10294,"mtime":1609324434945,"results":"33","hashOfConfig":"20"},{"size":5539,"mtime":1609319093252,"results":"34","hashOfConfig":"20"},{"size":6080,"mtime":1609336541589,"results":"35","hashOfConfig":"20"},{"size":4948,"mtime":1609335599639,"results":"36","hashOfConfig":"20"},{"size":3315,"mtime":1609340813111,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},"rj2yzq",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"41"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"41"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"41"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"41"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\App.js",["82"],"import \"./App.css\";\nimport MainPage from \"./components/mainPage/mainPage\";\nimport React from \"react\";\nimport MyAppBar from \"./components/appBar/appBar\";\n\n\nfunction App() {\n    return (\n\n        <div>\n            <MainPage/>\n        </div>\n\n    );\n}\n\nexport default App;\n",["83","84"],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\reportWebVitals.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\index.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\store.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\mainPage\\mainPage.jsx",["85","86"],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\services\\DataLoader.service..js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\appBar\\appBar.jsx",["87","88"],"import AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {CloudUpload} from \"@material-ui/icons\";\r\nimport DataLoaderService from \"../../services/DataLoader.service.\";\r\nimport \"./style.scss\"\r\nimport progressBarImage from \"../../assets/progress.gif\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {progressBarActions} from \"../../redux/actions/progressBar.actions\";\r\n\r\nconst MyAppBar = ({setData}) => {\r\n\r\n    let dataLoader = new DataLoaderService()\r\n    const [file, setFile] = useState(null)\r\n    const progressBarState = useSelector(state => state.progressBar)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (file != null) {\r\n            dispatch(progressBarActions.showProgressBar())\r\n            dataLoader.loadData(file)\r\n                .then((value) => {\r\n                    setData(value)\r\n                    dispatch(progressBarActions.hideProgressBar())\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.message)\r\n                    dispatch(progressBarActions.hideProgressBar())\r\n                })\r\n        }\r\n    }, [file])\r\n\r\n    const selectFile = event => {\r\n        dispatch(progressBarActions.showProgressBar())\r\n        setFile(event.target.files[0])\r\n        dispatch(progressBarActions.hideProgressBar())\r\n    }\r\n\r\n    const onCancelInputWindow = () => {\r\n        window.removeEventListener('focus', onCancelInputWindow)\r\n        dispatch(progressBarActions.hideProgressBar())\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"root\"}>\r\n            <AppBar color={\"secondary\"} position=\"static\">\r\n                <Toolbar className={\"toolbar\"}>\r\n                    {(progressBarState.visible === true) &&\r\n                    <img className={\"progressBar\"} src={progressBarImage} alt={\"progress...\"}/>}\r\n                    <div className={\"buttons_container\"}>\r\n                        <input\r\n                            accept=\".csv\"\r\n                            className={\"input\"}\r\n                            id=\"contained-button-file\"\r\n                            type=\"file\"\r\n                            style={{display: \"none\"}}\r\n                            onChange={selectFile}\r\n                        />\r\n                        <label htmlFor=\"contained-button-file\">\r\n                            {file && <span className={\"fileName\"}>{file.name}</span>}\r\n                            <Button onClick={() => {\r\n                                dispatch(progressBarActions.showProgressBar())\r\n                                // window.addEventListener('focus', onCancelInputWindow)\r\n                            }} className={\"button\"} startIcon={<CloudUpload/>} variant=\"contained\"\r\n                                    color={\"primary\"} component=\"span\">\r\n                                Choose data file\r\n                            </Button>\r\n                        </label>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyAppBar","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\theme.jsx",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\reducers\\index.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\mapChart\\mapChart.jsx",["89"],"import \"./style.scss\"\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {ComposableMap, Geographies, Geography, Graticule, Sphere} from \"react-simple-maps\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport {scaleLinear} from \"d3-scale\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {progressBarActions} from \"../../redux/actions/progressBar.actions\";\r\n\r\nconst geoURL = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\"\r\n\r\n/**\r\n * Wykres mapy świata\r\n * @param dataUtils\r\n * @param setProgress\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nconst MapChart = ({dataUtils}) => {\r\n\r\n    const [allCountries, setAllCountries] = useState(null)\r\n    const [years, setYears] = useState(null)\r\n    const [yearInput, setYearInput] = useState()\r\n    const [tooltipContent, setTooltipContent] = useState(\"\")\r\n    const [colorScale, setColorScale] = useState(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(progressBarActions.showProgressBar())\r\n        const countriesPromise = dataUtils.getDistinctsAllCountires()\r\n        const yearsPromise = dataUtils.getYears()\r\n        const colorScalePromise = getColorScale()\r\n        Promise.all([countriesPromise, yearsPromise, colorScalePromise]).then((values) => {\r\n            console.log(values)\r\n            setAllCountries(values[0])\r\n            setYears(values[1])\r\n            setYearInput(values[1][0])\r\n            setColorScale({'scale': values[2]})\r\n            dispatch(progressBarActions.hideProgressBar())\r\n        })\r\n    }, [])\r\n\r\n    async function getColorScale() {\r\n        let range = await dataUtils.getDeathsRange()\r\n        return scaleLinear().domain(range).range([\"#ffedea\", \"#ff5233\"])\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {(allCountries && years && yearInput && colorScale) &&\r\n            <div className={\"container\"}>\r\n                <div className={\"header\"}>\r\n                    <div className={\"selectClass\"}>\r\n                        <InputLabel id={\"selectLabel\"}>Choose date:</InputLabel>\r\n                        <Select\r\n                            labelId={\"selectLabel\"}\r\n                            value={yearInput}\r\n                            onChange={(event => setYearInput(event.target.value))}\r\n                        >\r\n                            {years.map(year => (\r\n                                <MenuItem key={year} value={year}>{year}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </div>\r\n                    <span className={\"title\"}>Liczba samobójstw w krajach</span>\r\n                </div>\r\n                <ComposableMap height={400} data-tip=\"\" projectionConfig={{scale: 140}}>\r\n                    <Sphere stroke=\"#E4E5E6\" strokeWidth={0.5}/>\r\n                    <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5}/>\r\n                    <Geographies geography={geoURL}>\r\n                        {({geographies}) => (\r\n                            geographies.map(geo => {\r\n                                const currentCountry = allCountries.find(country => country === geo.properties.NAME_LONG)\r\n                                const deaths = dataUtils.getAllDeaths(currentCountry, yearInput);\r\n                                return (\r\n                                    <Geography\r\n                                        key={geo.rsmKey}\r\n                                        geography={geo}\r\n                                        onMouseEnter={() => {\r\n                                            let {NAME_LONG} = geo.properties;\r\n                                            let {female, male} = dataUtils.getDeathsByGender(NAME_LONG, yearInput)\r\n                                            setTooltipContent(`${NAME_LONG}: \\n\r\n                                            women: ${female} \\n\r\n                                            men: ${male} \\n\r\n                                            all: ${dataUtils.getAllDeaths(NAME_LONG, yearInput)}`);\r\n                                        }}\r\n                                        onMouseLeave={() => {\r\n                                            setTooltipContent(\"\");\r\n                                        }}\r\n                                        style={{\r\n                                            default: {\r\n                                                fill: currentCountry ? colorScale.scale(deaths) : \"#F5F4F6\",\r\n                                                outline: \"none\"\r\n                                            },\r\n                                            hover: {\r\n                                                fill: \"rgba(77,4,4,0.8)\",\r\n                                                outline: \"none\"\r\n                                            },\r\n                                            pressed: {\r\n                                                outline: \"none\"\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                );\r\n                            })\r\n                        )\r\n\r\n                        }\r\n                    </Geographies>\r\n                </ComposableMap>\r\n                <ReactTooltip>{tooltipContent}</ReactTooltip>\r\n            </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MapChart","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\services\\dataUtils.service.js",["90","91","92","93","94"],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\reducers\\progressBar.reducer.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\actions\\progressBar.actions.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chernoffsFacesChart\\chernoffsFacesChart.jsx",["95","96","97","98","99"],"import \"./style.scss\"\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {progressBarActions} from \"../../redux/actions/progressBar.actions\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {ChernoffElements} from \"./chernoffElements\";\r\n\r\nconst ChernoffsFacesChart = ({dataUtils}) => {\r\n\r\n    const [yearInput, setYearInput] = useState()\r\n    const [countryInput, setCountryInput] = useState()\r\n    const [data, setData] = useState([])\r\n    const [allCountries, setAllCountries] = useState([])\r\n    const [yearsByCountry, setYearsByCountry] = useState([])\r\n    const dispatch = useDispatch()\r\n    const parameters = ['sex', 'age', 'suicides_no', 'population', 'suicides_k_pop']\r\n    const canvasRef = useRef(null)\r\n    const [dimension, setDimension] = useState([\r\n        window.innerWidth,\r\n        window.innerHeight,\r\n    ]);\r\n    const [containerDiv, setContainerDiv] = useState()\r\n\r\n    useEffect(() => {\r\n        dispatch(progressBarActions.showProgressBar())\r\n        dataUtils.getDistinctsAllCountires().then(countries => {\r\n            setAllCountries(countries)\r\n            const firstCountry = countries[0]\r\n            setCountryInput(firstCountry)\r\n            dataUtils.getDistinctAllYearsByCountry(firstCountry).then(years => {\r\n                setYearsByCountry(years)\r\n                setYearInput(years[0]);\r\n                dispatch(progressBarActions.hideProgressBar())\r\n            })\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dataUtils.getFilteredData(countryInput, yearInput).then((elements) => {\r\n            setData(elements)\r\n        })\r\n    }, [countryInput, yearInput])\r\n\r\n    useEffect(() => {\r\n        if (data != null && data.length > 0) drawFaces()\r\n        setContainerDiv(document.getElementsByClassName('container')[0])\r\n    }, [data])\r\n\r\n    useEffect(() => {\r\n        if (containerDiv !== undefined) {\r\n            const debouncedResizeHandler = debounce(() => {\r\n                setDimension([containerDiv.clientWidth, containerDiv.clientHeight]);\r\n            }, 80);\r\n            window.addEventListener('resize', debouncedResizeHandler);\r\n        }\r\n\r\n    }, [containerDiv])\r\n\r\n    useEffect(() => {\r\n        drawFaces()\r\n    }, [dimension])\r\n\r\n\r\n    function debounce(fn, ms) {\r\n        let timer;\r\n        return _ => {\r\n            clearTimeout(timer);\r\n            timer = setTimeout(_ => {\r\n                timer = null;\r\n                fn.apply(this, arguments);\r\n            }, ms);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Funkcja rysująca twarz,\r\n     * brane pod uwagę są sex, age, suiciedes_no, population, suiciedes/100k pop\r\n     * @param data\r\n     */\r\n    async function drawFaces() {\r\n\r\n        const dynamicCanvas = canvasRef.current\r\n        if (dynamicCanvas == null) return null\r\n        const ctx = dynamicCanvas.getContext('2d')\r\n        dynamicCanvas.height = containerDiv.clientHeight;\r\n        dynamicCanvas.width = containerDiv.clientWidth;\r\n\r\n        ctx.clearRect(0, 0, dynamicCanvas.width, dynamicCanvas.height);\r\n\r\n        data.forEach((element, index) => {\r\n            let coordinates = getCoordinates(index, data.length, dynamicCanvas.width, dynamicCanvas.height)\r\n            drawFace(ctx,\r\n                /*x*/coordinates[0], /*y*/coordinates[1],\r\n                /*head*/getType(parameters[0], element.sex),\r\n                /*eyebrow*/getType(parameters[1], element.age),\r\n                /*eyes*/getType(parameters[2], element.suicides_no),\r\n                /*nose*/getType(parameters[3], element.population),\r\n                /*mouth*/getType(parameters[4], element.suicides_k_pop));\r\n        })\r\n\r\n        return ctx\r\n    }\r\n\r\n\r\n    /**\r\n     * zwraca pozycje do narysowania twarzy\r\n     * @param currentElementIndex - indeks ajtualnie rysowanej twarzy\r\n     * @param allElementsLenght - liczba wszystkich twarzy do narysowania\r\n     * @param width - szerokość powierzchni rysowania\r\n     * @param height - wysokość powierzchni rysowania\r\n     * @returns {number[]}\r\n     */\r\n    function getCoordinates(currentElementIndex, allElementsLenght, width, height) {\r\n        const oneElementSize = [100, 100]\r\n        const elementsInRow = Math.round(width / (oneElementSize[0] + 20))\r\n        const rows = Math.ceil(allElementsLenght / elementsInRow)\r\n        let currentElement = currentElementIndex + 1\r\n        let iteratedElements = 1\r\n        for (let i = 1; i <= rows; i++) { //rows\r\n            for (let j = 1; j <= elementsInRow; j++) { //columns\r\n                if (iteratedElements === currentElement) {\r\n                    return [j * oneElementSize[0]-50, i * oneElementSize[1] - 80]\r\n                }\r\n                iteratedElements++\r\n            }\r\n        }\r\n        return [0, 0]\r\n    }\r\n\r\n    /**\r\n     * Funkcja rysująca jedną twarz.\r\n     * @param {CanvasRenderingContext2D} ctx\r\n     * @param {number} x - Współrzędna X na mapie.\r\n     * @param {number} y - Współrzędna Y na mapie.\r\n     * @param {number} headType - Typ twarzy (1, 2, 3).\r\n     * @param {number} eyebrowType - Typ brwi (1, 2, 3).\r\n     * @param {number} eyesType - Typ oczu (1, 2, 3).\r\n     * @param {number} noseType - Typ nosa (1, 2, 3).\r\n     * @param {number} mouthType - Typ ust (1, 2, 3).\r\n     */\r\n    function drawFace(ctx, x, y, headType, eyebrowType, eyesType, noseType, mouthType) {\r\n        ChernoffElements.drawHead(ctx, x, y, headType);\r\n        ChernoffElements.drawEyebrow(ctx, x, y, eyebrowType);\r\n        ChernoffElements.drawEyes(ctx, x, y, eyesType);\r\n        ChernoffElements.drawNose(ctx, x, y, noseType);\r\n        ChernoffElements.drawMouth(ctx, x, y, mouthType);\r\n    }\r\n\r\n\r\n    /**\r\n     * funkcja wyznacza numer przedziału do któej należy @parameterValue\r\n     * @param parameterName - nazwa kolumny ze zbioru danych\r\n     * @param parameterValue - wartość komórki w wybranej kolumnie oraz aktualnie przetwarzanym wierszu\r\n     */\r\n    function getType(parameterName, parameterValue) {\r\n        switch (parameterName) {\r\n            case /*sex*/\r\n            parameters[0]: {\r\n                if (parameterValue === 'male') return 1\r\n                else return 2\r\n            }\r\n            case /*age*/\r\n            parameters[1]: {\r\n                const age = dataUtils.parseAge(parameterValue)\r\n                if (age != null) {\r\n                    if (age.length === 2) {\r\n                        if (age[0] > 0 && age[1] < 25) return 2\r\n                        if (age[0] > 25 && age[1] < 55) return 1\r\n                    } else {\r\n                        return 3\r\n                    }\r\n                }\r\n                return 2\r\n            }\r\n            case /*suicides_no*/\r\n            parameters[2]: {\r\n                const sortedData = [...data].sort((a, b) => a.suicides_no > b.suicides_no)\r\n                const middle = Math.ceil(sortedData.length / 2)\r\n                const quarter = Math.ceil(middle / 2)\r\n                if (parameterValue < sortedData[quarter].suicides_no) return 3\r\n                if (parameterValue > sortedData[quarter].suicides_no && parameterValue < sortedData[middle + quarter].suicides_no) return 1\r\n                if (parameterValue > sortedData[middle + quarter]) return 2\r\n                return 3\r\n            }\r\n            case /*population*/\r\n            parameters[3]: {\r\n                const sortedData = [...data].sort((a, b) => a.population > b.population)\r\n                const middle = Math.ceil(sortedData.length / 2)\r\n                const quarter = Math.ceil(middle / 2)\r\n                if (parameterValue < sortedData[quarter].population) return 3\r\n                if (parameterValue > sortedData[quarter].population && parameterValue < sortedData[middle + quarter].population) return 1\r\n                if (parameterValue > sortedData[middle + quarter].population) return 2\r\n                return 3\r\n            }\r\n            case /*suicides_k_pop*/\r\n            parameters[4]: {\r\n                const sortedData = [...data].sort((a, b) => a.suicides_k_pop > b.suicides_k_pop)\r\n                const middle = Math.ceil(sortedData.length / 2)\r\n                const quarter = Math.ceil(middle / 2)\r\n                if (parameterValue < sortedData[quarter].suicides_k_pop) return 3\r\n                if (parameterValue > sortedData[quarter].suicides_k_pop && parameterValue < sortedData[middle + quarter].suicides_k_pop) return 1\r\n                if (parameterValue > sortedData[middle + quarter].suicides_k_pop) return 2\r\n                return 3\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"chernoff\"}>\r\n            {(allCountries && yearsByCountry && yearInput && countryInput) &&\r\n            <div className={\"container\"} style={{height: '600px'}}>\r\n                <div className={\"controls\"}>\r\n                    <div>\r\n                        <InputLabel id={\"selectLabel\"}>Choose country:</InputLabel>\r\n                        <Select\r\n                            labelId={\"selectLabel\"}\r\n                            value={countryInput}\r\n                            onChange={(event => setCountryInput(event.target.value))}\r\n                        >\r\n                            {allCountries.map(country => (\r\n                                <MenuItem key={country} value={country}>{country}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </div>\r\n                    <div>\r\n                        <InputLabel id={\"selectLabel\"}>Choose year:</InputLabel>\r\n                        <Select\r\n                            labelId={\"selectLabel\"}\r\n                            value={yearInput}\r\n                            onChange={(event => setYearInput(event.target.value))}\r\n                        >\r\n                            {yearsByCountry.map(year => (\r\n                                <MenuItem key={year} value={year}>{year}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </div>\r\n                </div>\r\n                <canvas className={\"canvas\"} ref={canvasRef}/>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChernoffsFacesChart","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chernoffsFacesChart\\chernoffElements.js",["100","101","102","103","104"],"export const ChernoffElements = {\r\n    drawNose,\r\n    drawHead,\r\n    drawEyes,\r\n    drawMouth,\r\n    drawEyebrow\r\n}\r\n\r\n/**\r\n * Funkcja rysująca nos.\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {number} x - Współrzędna X w obrębie twarzy.\r\n * @param {number} y - Współrzędna Y w obrębie twarzy.\r\n * @param {number} type - 1, 2 lub 3\r\n */\r\nfunction drawNose(ctx, x, y, type) {\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x + 25, y + 20);\r\n    switch (type) {\r\n        case 1:\r\n            ctx.lineTo(x + 23, y + 25);\r\n            ctx.lineTo(x + 27, y + 25);\r\n            break;\r\n        case 2:\r\n            ctx.lineTo(x + 20, y + 25);\r\n            ctx.lineTo(x + 30, y + 25);\r\n            break;\r\n        case 3:\r\n            ctx.lineTo(x + 20, y + 32);\r\n            ctx.lineTo(x + 30, y + 32);\r\n            break;\r\n    }\r\n    ctx.lineTo(x + 25, y + 20);\r\n    ctx.stroke();\r\n}\r\n\r\n/**\r\n * Funkcja rysująca głowę.\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {number} x - Współrzędna X w obrębie twarzy.\r\n * @param {number} y - Współrzędna Y w obrębie twarzy.\r\n * @param {number} type - 1, 2 lub 3\r\n */\r\nfunction drawHead(ctx, x, y, type) {\r\n\r\n    switch (type) {\r\n        case 1:\r\n            drawEllipse(ctx, (x - /*width*/30 / 2.0) + 25, (y - 50 / 2.0) + 25, /*width*/30, 50);\r\n            break;\r\n        case 2:\r\n            drawEllipse(ctx, (x - /*width*/40 / 2.0) + 25, (y - 50 / 2.0) + 25, /*width*/40, 50);\r\n            break;\r\n        case 3:\r\n            drawEllipse(ctx, (x - /*width*/50 / 2.0) + 25, (y - 50 / 2.0) + 25, /*width*/50, 50);\r\n            break;\r\n    }\r\n}\r\n\r\n/**\r\n * Funkcja rysująca oczy.\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {number} x - Współrzędna X w obrębie twarzy.\r\n * @param {number} y - Współrzędna Y w obrębie twarzy.\r\n * @param {number} type - 1, 2 lub 3\r\n */\r\nfunction drawEyes(ctx, x, y, type) {\r\n\r\n    var size;\r\n    switch (type) {\r\n        case 1:\r\n            size = 6;\r\n            break;\r\n        case 2:\r\n            size = 10;\r\n            break;\r\n        case 3:\r\n            size = 15;\r\n            break;\r\n    }\r\n\r\n    drawEllipseByCenter(ctx, x + 15, y + 15, size, size);\r\n    drawEllipseByCenter(ctx, x + 35, y + 15, size, size);\r\n    drawEllipseByCenter(ctx, x + 15, y + 15, size - 5, size - 5);\r\n    drawEllipseByCenter(ctx, x + 35, y + 15, size - 5, size - 5);\r\n}\r\n\r\n/**\r\n * Funkcja rysująca usta.\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {number} x - Współrzędna X w obrębie twarzy.\r\n * @param {number} y - Współrzędna Y w obrębie twarzy.\r\n * @param {number} type - 1, 2 lub 3\r\n */\r\nfunction drawMouth(ctx, x, y, type) {\r\n\r\n    ctx.beginPath();\r\n    switch (type) {\r\n        case 3:\r\n            ctx.arc(x + 25, y + 25, 20, 0.25 * Math.PI, 0.75 * Math.PI);\r\n            break;\r\n        case 2:\r\n            ctx.moveTo(x + 15, y + 40);\r\n            ctx.lineTo(x + 35, y + 40);\r\n            break;\r\n        case 1:\r\n            ctx.arc(x + 25, y + 55, 20, 1.25 * Math.PI, 1.75 * Math.PI);\r\n            break;\r\n    }\r\n    ctx.lineWidth = 2;\r\n    ctx.stroke();\r\n}\r\n\r\n/**\r\n * Funkcja rysująca brwi.\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {number} x - Współrzędna X w obrębie twarzy.\r\n * @param {number} y - Współrzędna Y w obrębie twarzy.\r\n * @param {number} type - 1, 2 lub 3\r\n */\r\nfunction drawEyebrow(ctx, x, y, type) {\r\n\r\n    ctx.beginPath();\r\n    switch (type) {\r\n        case 1:\r\n            //lewa1\r\n            ctx.moveTo(x + 5, y + 15);\r\n            ctx.lineTo(x + 20, y + 5);\r\n            //prawa1\r\n            ctx.moveTo(x + 30, y + 5);\r\n            ctx.lineTo(x + 45, y + 15);\r\n            break;\r\n        case 2:\r\n            //lewa2\r\n            ctx.moveTo(x + 8, y + 8);\r\n            ctx.lineTo(x + 20, y + 8);\r\n            //prawa2\r\n            ctx.moveTo(x + 30, y + 8);\r\n            ctx.lineTo(x + 42, y + 8);\r\n            break;\r\n        case 3:\r\n            //lewa3\r\n            ctx.moveTo(x + 8, y + 5);\r\n            ctx.lineTo(x + 20, y + 8);\r\n            //prawa3\r\n            ctx.moveTo(x + 30, y + 8);\r\n            ctx.lineTo(x + 42, y + 5);\r\n            break;\r\n    }\r\n    ctx.lineWidth = 3;\r\n    ctx.stroke();\r\n}\r\n\r\n/**\r\n * Funkcja rysująca elipsę.\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {number} x - Współrzędna X środka elipsy.\r\n * @param {number} y - Współrzędna Y środka elipsy.\r\n * @param {number} w - Szerokość elipsy.\r\n * @param {number} h - Wysokość elipsy.\r\n */\r\nfunction drawEllipseByCenter(ctx, x, y, w, h) {\r\n\r\n    drawEllipse(ctx, x - w / 2.0, y - h / 2.0, w, h);\r\n}\r\n\r\n/**\r\n * Funkcja rysująca elipsę.\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {number} x - Współrzędna X elipsy.\r\n * @param {number} y - Współrzędna Y elipsy.\r\n * @param {number} w - Szerokość elipsy.\r\n * @param {number} h - Wysokość elipsy.\r\n */\r\nfunction drawEllipse(ctx, x, y, w, h) {\r\n\r\n    var kappa = .5522848,\r\n        ox = (w / 2) * kappa, // control point offset horizontal\r\n        oy = (h / 2) * kappa, // control point offset vertical\r\n        xe = x + w,           // x-end\r\n        ye = y + h,           // y-end\r\n        xm = x + w / 2,       // x-middle\r\n        ym = y + h / 2;       // y-middle\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x, ym);\r\n    ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\r\n    ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\r\n    ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\r\n    ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\r\n    ctx.lineWidth = 1;\r\n    ctx.stroke();\r\n}","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chartOne\\areaAgeChart.jsx",["105","106","107"],"import React, {useEffect, useState} from \"react\";\r\nimport {Area, AreaChart, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis} from \"recharts\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport \"./style.scss\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {progressBarActions} from \"../../redux/actions/progressBar.actions\";\r\n\r\n/**\r\n * Wyświetla diagram prezentujący zakres wieku w jakim ludzie umierali w określonym roku\r\n *\r\n * @param data - dane pobrane z pliku\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nconst AreaAgeChart = ({dataUtils}) => {\r\n\r\n    const maxAge = 100\r\n\r\n    const [allCountries, setAllCountries] = useState(null)\r\n    //kraj z którego wyświetlane są statystyki w tym wykresie\r\n    const [country, selectCountry] = useState(null)\r\n    const [specificData, setSpecificData] = useState()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (country != null) {\r\n            dispatch(progressBarActions.showProgressBar())\r\n            setSpecificData(getUpdatedData)\r\n        }\r\n    }, [country])\r\n\r\n    useEffect(() => {\r\n        dispatch(progressBarActions.hideProgressBar())\r\n    }, [specificData])\r\n\r\n    useEffect(() => {\r\n        dispatch(progressBarActions.showProgressBar())\r\n        dataUtils.getDistinctsAllCountires().then(data => {\r\n            setAllCountries(data)\r\n            selectCountry(data[0])\r\n            dispatch(progressBarActions.hideProgressBar())\r\n        })\r\n    }, [])\r\n\r\n    /**\r\n     * zwraca wiek od którego ludzie umierją w konkretnym roku (15-24 years, 75+ years)\r\n     *\r\n     * @param ageFromData - rekord z kolumny age z danych\r\n     */\r\n    function getStartAge(ageFromData) {\r\n        let indexOfDash = ageFromData.indexOf('-')\r\n        let result = 0\r\n        if (indexOfDash === -1) {\r\n            let indexOfAddSign = ageFromData.indexOf('+')\r\n            result = Number(ageFromData.substring(0, indexOfAddSign))\r\n        } else {\r\n            result = Number(ageFromData.substring(0, indexOfDash))\r\n        }\r\n        return result\r\n    }\r\n\r\n    function getEndAge(ageFromData) {\r\n        let indexOfDash = ageFromData.indexOf('-')\r\n        let result = 0\r\n        if (indexOfDash === -1) {\r\n            result = maxAge\r\n        } else {\r\n            let indexOfSpace = ageFromData.indexOf(' ')\r\n            result = Number(ageFromData.substring(indexOfDash + 1, indexOfSpace))\r\n        }\r\n        return result\r\n    }\r\n\r\n\r\n    /**\r\n     * zwraca wartość średnią początkowej wartości wieku w którym umierali ludzie\r\n     * z wybranego roku i kraju\r\n     * @param year\r\n     * @param country\r\n     */\r\n    function getAverageStartAge(year, country) {\r\n        let result = 0\r\n        const filteredData = dataUtils.data.filter(object => (\r\n            object.year === year && object.country === country\r\n        ))\r\n        filteredData.forEach(object => {\r\n            result = result + getStartAge(object.age)\r\n        })\r\n        return result / filteredData.length\r\n    }\r\n\r\n    function getAverageEndAge(year, country) {\r\n        let result = 0\r\n        const filteredData = dataUtils.data.filter(object => (\r\n            object.year === year && object.country === country\r\n        ))\r\n        filteredData.forEach(object => {\r\n            result = result + getEndAge(object.age)\r\n        })\r\n        return result / filteredData.length\r\n    }\r\n\r\n    function getUpdatedData() {\r\n        return dataUtils.data\r\n            .filter(object => (\r\n                object.country === country\r\n            ))\r\n            .map(object => {\r\n                return {\r\n                    year: object.year,\r\n                    ageRange: [\r\n                        getAverageStartAge(object.year, object.country),\r\n                        getAverageEndAge(object.year, object.country)\r\n                    ]\r\n                }\r\n            })\r\n            .sort(compare)\r\n    }\r\n\r\n    function compare(a, b) {\r\n        if (a.year > b.year) return 1\r\n        else if (b.year > a.year) return -1\r\n        return 0;\r\n    }\r\n\r\n    async function changeCountry(country) {\r\n        selectCountry(country)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"chartOne\"}>\r\n            {country &&\r\n            <div className={\"container\"}>\r\n                <div className={\"header\"}>\r\n                    <div className={\"selectClass\"}>\r\n                        <InputLabel id={\"selectLabel\"}>Choose country:</InputLabel>\r\n                        <Select\r\n                            labelId={\"selectLabel\"}\r\n                            value={country}\r\n                            onChange={(event => changeCountry(event.target.value))}\r\n                        >\r\n                            {allCountries.map(country => (\r\n                                <MenuItem key={country} value={country}>{country}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </div>\r\n                    <span className={\"chartTitle\"}>Sredni wiek osób podczas samobójstwa</span>\r\n                </div>\r\n                <div className={\"chartDiv\"}>\r\n                    <ResponsiveContainer width={\"95%\"} height={400}>\r\n                        <AreaChart\r\n                            data={specificData}\r\n                            margin={{\r\n                                top: 20, right: 20, bottom: 20, left: 20,\r\n                            }}>\r\n                            <XAxis dataKey={\"year\"} label={{value: 'Rok', angle: 0, position: 'bottom'}}/>\r\n                            <YAxis label={{value: 'Ilość', angle: -90, position: 'left'}}/>\r\n                            <Area dataKey=\"ageRange\" stroke=\"#8884d8\" fill=\"#8884d8\"/>\r\n                            <Tooltip/>\r\n                            <Legend align={\"left\"}/>\r\n                        </AreaChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AreaAgeChart;","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\barChart\\myBarChart.jsx",["108","109","110","111"],"import \"./style.scss\"\r\nimport React, {useEffect, useState} from \"react\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, XAxis, YAxis} from \"recharts\";\r\nimport {Tooltip} from \"@material-ui/core\";\r\n\r\n/**\r\n *\r\n * @param {DataUtils} dataLoader:\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nconst MyBarChart = ({dataUtils}) => {\r\n\r\n    const dataSubjects = ['suicides', 'population', 'suicides / 100k population']\r\n    const [countryInput, setCountryInput] = useState(null)\r\n    const [dataSubject, setDataSubject] = useState(dataSubjects[0])\r\n    const [allCountries, setAllCountries] = useState([])\r\n    const [yearsByCountry, setYearsByCountry] = useState([])\r\n    const [data, setData] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        dataUtils.getDistinctsAllCountires().then((countries) => {\r\n            setCountryInput(countries[0])\r\n            setAllCountries(countries)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (countryInput != null) {\r\n            dataUtils.getDistinctAllYearsByCountry(countryInput).then((years) => {\r\n                setYearsByCountry(years)\r\n            })\r\n        }\r\n    }, [countryInput])\r\n\r\n    useEffect(() => {\r\n        let tmpData = []\r\n        switch (dataSubject) {\r\n            case dataSubjects[0]: {\r\n                yearsByCountry.forEach(value => {\r\n                    let tmp = dataUtils.getAllDeaths(countryInput, value)\r\n                    tmpData.push({\r\n                        name: value,\r\n                        value: tmp\r\n                    })\r\n                })\r\n                setData(tmpData)\r\n                break;\r\n            }\r\n            case dataSubjects[1]: {\r\n                yearsByCountry.forEach(value => {\r\n                    let tmp = dataUtils.getPopulationByCountryAndYear(countryInput, value)\r\n                    tmpData.push({\r\n                        name: value,\r\n                        value: tmp\r\n                    })\r\n                })\r\n                setData(tmpData)\r\n                break;\r\n            }\r\n            case dataSubjects[2]: {\r\n                yearsByCountry.forEach(value => {\r\n                    let tmp = dataUtils.getPopulationByCountryAndYear(countryInput, value)\r\n                    tmpData.push({\r\n                        name: value,\r\n                        value: tmp\r\n                    })\r\n                })\r\n                setData(tmpData)\r\n                break;\r\n            }\r\n        }\r\n    }, [yearsByCountry, dataSubject])\r\n\r\n\r\n    return (\r\n        <div className={\"barChart\"}>\r\n            {(countryInput && allCountries.length > 0 && dataSubject) &&\r\n            <div className={\"container\"}>\r\n                <div className={\"controls\"}>\r\n                    <div className={\"header\"}>\r\n                        <div>\r\n                            <InputLabel id={\"selectLabel\"}>Choose country:</InputLabel>\r\n                            <Select\r\n                                labelId={\"selectLabel\"}\r\n                                value={countryInput}\r\n                                onChange={(event => setCountryInput(event.target.value))}\r\n                            >\r\n                                {allCountries.map(country => (\r\n                                    <MenuItem key={country} value={country}>{country}</MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </div>\r\n                        <div>\r\n                            <InputLabel id={\"selectLabel1\"}>Choose data subject:</InputLabel>\r\n                            <Select\r\n                                labelId={\"selectLabel1\"}\r\n                                value={dataSubject}\r\n                                onChange={(event => setDataSubject(event.target.value))}\r\n                            >\r\n                                {dataSubjects.map(element => (\r\n                                    <MenuItem key={element} value={element}>{element}</MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={\"chart\"}>\r\n                    <ResponsiveContainer width={\"95%\"} height={500}>\r\n                        <BarChart data={data}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <XAxis dataKey=\"name\"/>\r\n                            <YAxis/>\r\n                            <Tooltip/>\r\n                            <Legend/>\r\n                            <Bar dataKey=\"value\" fill=\"#8884d8\"/>\r\n                        </BarChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyBarChart","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\populationPyramidChart\\populationPyramidChart.jsx",[],{"ruleId":"112","severity":1,"message":"113","line":4,"column":8,"nodeType":"114","messageId":"115","endLine":4,"endColumn":16},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":27,"column":8,"nodeType":"122","endLine":27,"endColumn":14,"suggestions":"123"},{"ruleId":"120","severity":1,"message":"121","line":31,"column":8,"nodeType":"122","endLine":31,"endColumn":19,"suggestions":"124"},{"ruleId":"120","severity":1,"message":"125","line":32,"column":8,"nodeType":"122","endLine":32,"endColumn":14,"suggestions":"126"},{"ruleId":"112","severity":1,"message":"127","line":43,"column":45,"nodeType":"114","messageId":"115","endLine":43,"endColumn":64},{"ruleId":"120","severity":1,"message":"128","line":54,"column":8,"nodeType":"122","endLine":54,"endColumn":10,"suggestions":"129"},{"ruleId":"130","severity":1,"message":"131","line":70,"column":101,"nodeType":"132","messageId":"133","endLine":70,"endColumn":103},{"ruleId":"130","severity":1,"message":"131","line":85,"column":97,"nodeType":"132","messageId":"133","endLine":85,"endColumn":99},{"ruleId":"130","severity":1,"message":"131","line":94,"column":97,"nodeType":"132","messageId":"133","endLine":94,"endColumn":99},{"ruleId":"130","severity":1,"message":"131","line":109,"column":101,"nodeType":"132","messageId":"133","endLine":109,"endColumn":103},{"ruleId":"130","severity":1,"message":"131","line":159,"column":88,"nodeType":"132","messageId":"133","endLine":159,"endColumn":90},{"ruleId":"120","severity":1,"message":"134","line":38,"column":8,"nodeType":"122","endLine":38,"endColumn":10,"suggestions":"135"},{"ruleId":"120","severity":1,"message":"136","line":44,"column":8,"nodeType":"122","endLine":44,"endColumn":33,"suggestions":"137"},{"ruleId":"120","severity":1,"message":"138","line":49,"column":8,"nodeType":"122","endLine":49,"endColumn":14,"suggestions":"139"},{"ruleId":"120","severity":1,"message":"138","line":63,"column":8,"nodeType":"122","endLine":63,"endColumn":19,"suggestions":"140"},{"ruleId":"141","severity":1,"message":"142","line":158,"column":9,"nodeType":"143","messageId":"144","endLine":207,"endColumn":10},{"ruleId":"141","severity":1,"message":"142","line":20,"column":5,"nodeType":"143","messageId":"144","endLine":33,"endColumn":6},{"ruleId":"141","severity":1,"message":"142","line":47,"column":5,"nodeType":"143","messageId":"144","endLine":57,"endColumn":6},{"ruleId":"141","severity":1,"message":"142","line":70,"column":5,"nodeType":"143","messageId":"144","endLine":80,"endColumn":6},{"ruleId":"141","severity":1,"message":"142","line":98,"column":5,"nodeType":"143","messageId":"144","endLine":109,"endColumn":6},{"ruleId":"141","severity":1,"message":"142","line":124,"column":5,"nodeType":"143","messageId":"144","endLine":149,"endColumn":6},{"ruleId":"120","severity":1,"message":"145","line":33,"column":8,"nodeType":"122","endLine":33,"endColumn":17,"suggestions":"146"},{"ruleId":"120","severity":1,"message":"121","line":37,"column":8,"nodeType":"122","endLine":37,"endColumn":22,"suggestions":"147"},{"ruleId":"120","severity":1,"message":"134","line":46,"column":8,"nodeType":"122","endLine":46,"endColumn":10,"suggestions":"148"},{"ruleId":"120","severity":1,"message":"136","line":30,"column":8,"nodeType":"122","endLine":30,"endColumn":10,"suggestions":"149"},{"ruleId":"120","severity":1,"message":"136","line":38,"column":8,"nodeType":"122","endLine":38,"endColumn":22,"suggestions":"150"},{"ruleId":"141","severity":1,"message":"142","line":42,"column":9,"nodeType":"143","messageId":"144","endLine":69,"endColumn":10},{"ruleId":"120","severity":1,"message":"151","line":70,"column":8,"nodeType":"122","endLine":70,"endColumn":37,"suggestions":"152"},"no-unused-vars","'MyAppBar' is defined but never used.","Identifier","unusedVar","no-native-reassign",["153"],"no-negated-in-lhs",["154"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["155"],["156"],"React Hook useEffect has missing dependencies: 'dataLoader', 'dispatch', and 'setData'. Either include them or remove the dependency array. If 'setData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["157"],"'onCancelInputWindow' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dataUtils', 'dispatch', and 'getColorScale'. Either include them or remove the dependency array.",["158"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'dataUtils' and 'dispatch'. Either include them or remove the dependency array.",["159"],"React Hook useEffect has a missing dependency: 'dataUtils'. Either include it or remove the dependency array.",["160"],"React Hook useEffect has a missing dependency: 'drawFaces'. Either include it or remove the dependency array.",["161"],["162"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'dispatch' and 'getUpdatedData'. Either include them or remove the dependency array.",["163"],["164"],["165"],["166"],["167"],"React Hook useEffect has missing dependencies: 'countryInput', 'dataSubjects', and 'dataUtils'. Either include them or remove the dependency array.",["168"],"no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"171","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"171","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},"Update the dependencies array to be: [data, dispatch]",{"range":"195","text":"196"},"Update the dependencies array to be: [dataUtils, dispatch]",{"range":"197","text":"198"},"Update the dependencies array to be: [dataLoader, dispatch, file, setData]",{"range":"199","text":"200"},"Update the dependencies array to be: [dataUtils, dispatch, getColorScale]",{"range":"201","text":"202"},{"range":"203","text":"198"},"Update the dependencies array to be: [countryInput, dataUtils, yearInput]",{"range":"204","text":"205"},"Update the dependencies array to be: [data, drawFaces]",{"range":"206","text":"207"},"Update the dependencies array to be: [dimension, drawFaces]",{"range":"208","text":"209"},"Update the dependencies array to be: [country, dispatch, getUpdatedData]",{"range":"210","text":"211"},"Update the dependencies array to be: [dispatch, specificData]",{"range":"212","text":"213"},{"range":"214","text":"198"},"Update the dependencies array to be: [dataUtils]",{"range":"215","text":"216"},"Update the dependencies array to be: [countryInput, dataUtils]",{"range":"217","text":"218"},"Update the dependencies array to be: [yearsByCountry, dataSubject, dataSubjects, dataUtils, countryInput]",{"range":"219","text":"220"},[1042,1048],"[data, dispatch]",[1139,1150],"[dataUtils, dispatch]",[1265,1271],"[dataLoader, dispatch, file, setData]",[2089,2091],"[dataUtils, dispatch, getColorScale]",[1602,1604],[1763,1788],"[countryInput, dataUtils, yearInput]",[1955,1961],"[data, drawFaces]",[2362,2373],"[dimension, drawFaces]",[1152,1161],"[country, dispatch, getUpdatedData]",[1252,1266],"[dispatch, specificData]",[1561,1563],[1080,1082],"[dataUtils]",[1307,1321],"[countryInput, dataUtils]",[2300,2329],"[yearsByCountry, dataSubject, dataSubjects, dataUtils, countryInput]"]