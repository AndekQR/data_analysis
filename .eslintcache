[{"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\App.js":"1","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\reportWebVitals.js":"2","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\index.js":"3","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\store.js":"4","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\mainPage\\mainPage.jsx":"5","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\services\\DataLoader.service..js":"6","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\appBar\\appBar.jsx":"7","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\theme.jsx":"8","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\reducers\\index.js":"9","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\mapChart\\mapChart.jsx":"10","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\services\\dataUtils.service.js":"11","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\reducers\\progressBar.reducer.js":"12","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\actions\\progressBar.actions.js":"13","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chernoffsFacesChart\\chernoffsFacesChart.jsx":"14","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chernoffsFacesChart\\chernoffElements.js":"15","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chartOne\\areaAgeChart.jsx":"16","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\barChart\\myBarChart.jsx":"17","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\populationPyramidChart\\populationPyramidChart.jsx":"18","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chernoffsFacesChart\\chernoffLegend.jsx":"19"},{"size":270,"mtime":1606837608352,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"21"},{"size":766,"mtime":1606910810600,"results":"23","hashOfConfig":"21"},{"size":338,"mtime":1608134950578,"results":"24","hashOfConfig":"21"},{"size":3474,"mtime":1609410901084,"results":"25","hashOfConfig":"21"},{"size":693,"mtime":1606842360416,"results":"26","hashOfConfig":"21"},{"size":3180,"mtime":1609145088992,"results":"27","hashOfConfig":"21"},{"size":328,"mtime":1606739030821,"results":"28","hashOfConfig":"21"},{"size":191,"mtime":1608126884146,"results":"29","hashOfConfig":"21"},{"size":5576,"mtime":1609409563802,"results":"30","hashOfConfig":"21"},{"size":6989,"mtime":1609347831616,"results":"31","hashOfConfig":"21"},{"size":443,"mtime":1608130059664,"results":"32","hashOfConfig":"21"},{"size":313,"mtime":1608126516040,"results":"33","hashOfConfig":"21"},{"size":10988,"mtime":1609408257125,"results":"34","hashOfConfig":"21"},{"size":5541,"mtime":1609402041006,"results":"35","hashOfConfig":"21"},{"size":6100,"mtime":1609401902897,"results":"36","hashOfConfig":"21"},{"size":5319,"mtime":1609348495565,"results":"37","hashOfConfig":"21"},{"size":5341,"mtime":1609349016264,"results":"38","hashOfConfig":"21"},{"size":2643,"mtime":1609410944017,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"rj2yzq",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"43"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"43"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"43"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"43"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\App.js",["86"],"import \"./App.css\";\nimport MainPage from \"./components/mainPage/mainPage\";\nimport React from \"react\";\nimport MyAppBar from \"./components/appBar/appBar\";\n\n\nfunction App() {\n    return (\n\n        <div>\n            <MainPage/>\n        </div>\n\n    );\n}\n\nexport default App;\n",["87","88"],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\reportWebVitals.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\index.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\store.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\mainPage\\mainPage.jsx",["89","90","91","92","93"],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\services\\DataLoader.service..js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\appBar\\appBar.jsx",["94","95"],"import AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {CloudUpload} from \"@material-ui/icons\";\r\nimport DataLoaderService from \"../../services/DataLoader.service.\";\r\nimport \"./style.scss\"\r\nimport progressBarImage from \"../../assets/progress.gif\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {progressBarActions} from \"../../redux/actions/progressBar.actions\";\r\n\r\nconst MyAppBar = ({setData}) => {\r\n\r\n    let dataLoader = new DataLoaderService()\r\n    const [file, setFile] = useState(null)\r\n    const progressBarState = useSelector(state => state.progressBar)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (file != null) {\r\n            dispatch(progressBarActions.showProgressBar())\r\n            dataLoader.loadData(file)\r\n                .then((value) => {\r\n                    setData(value)\r\n                    dispatch(progressBarActions.hideProgressBar())\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.message)\r\n                    dispatch(progressBarActions.hideProgressBar())\r\n                })\r\n        }\r\n    }, [file])\r\n\r\n    const selectFile = event => {\r\n        dispatch(progressBarActions.showProgressBar())\r\n        setFile(event.target.files[0])\r\n        dispatch(progressBarActions.hideProgressBar())\r\n    }\r\n\r\n    const onCancelInputWindow = () => {\r\n        window.removeEventListener('focus', onCancelInputWindow)\r\n        dispatch(progressBarActions.hideProgressBar())\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"root\"}>\r\n            <AppBar color={\"secondary\"} position=\"static\">\r\n                <Toolbar className={\"toolbar\"}>\r\n                    {(progressBarState.visible === true) &&\r\n                    <img className={\"progressBar\"} src={progressBarImage} alt={\"progress...\"}/>}\r\n                    <div className={\"buttons_container\"}>\r\n                        <input\r\n                            accept=\".csv\"\r\n                            className={\"input\"}\r\n                            id=\"contained-button-file\"\r\n                            type=\"file\"\r\n                            style={{display: \"none\"}}\r\n                            onChange={selectFile}\r\n                        />\r\n                        <label htmlFor=\"contained-button-file\">\r\n                            {file && <span className={\"fileName\"}>{file.name}</span>}\r\n                            <Button onClick={() => {\r\n                                dispatch(progressBarActions.showProgressBar())\r\n                                // window.addEventListener('focus', onCancelInputWindow)\r\n                            }} className={\"button\"} startIcon={<CloudUpload/>} variant=\"contained\"\r\n                                    color={\"primary\"} component=\"span\">\r\n                                Choose data file\r\n                            </Button>\r\n                        </label>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyAppBar","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\theme.jsx",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\reducers\\index.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\mapChart\\mapChart.jsx",["96"],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\services\\dataUtils.service.js",["97","98","99","100","101","102"],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\reducers\\progressBar.reducer.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\redux\\actions\\progressBar.actions.js",[],"D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chernoffsFacesChart\\chernoffsFacesChart.jsx",["103","104","105","106","107"],"import \"./style.scss\"\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {progressBarActions} from \"../../redux/actions/progressBar.actions\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {ChernoffElements} from \"./chernoffElements\";\r\nimport ChernoffLegend from \"./chernoffLegend\";\r\n\r\nconst ChernoffsFacesChart = ({dataUtils}) => {\r\n\r\n    const [yearInput, setYearInput] = useState()\r\n    const [countryInput, setCountryInput] = useState()\r\n    const [data, setData] = useState([])\r\n    const [allCountries, setAllCountries] = useState([])\r\n    const [yearsByCountry, setYearsByCountry] = useState([])\r\n    const dispatch = useDispatch()\r\n    const parameters = ['sex', 'age', 'suicides_no', 'population', 'suicides_k_pop']\r\n    const canvasRef = useRef(null)\r\n    const [dimension, setDimension] = useState([\r\n        window.innerWidth,\r\n        window.innerHeight,\r\n    ]);\r\n    const [containerDiv, setContainerDiv] = useState()\r\n\r\n    useEffect(() => {\r\n        dispatch(progressBarActions.showProgressBar())\r\n        dataUtils.getDistinctsAllCountires().then(countries => {\r\n            setAllCountries(countries)\r\n            const firstCountry = countries[0]\r\n            setCountryInput(firstCountry)\r\n            dataUtils.getDistinctAllYearsByCountry(firstCountry).then(years => {\r\n                setYearsByCountry(years)\r\n                setYearInput(years[0]);\r\n                dispatch(progressBarActions.hideProgressBar())\r\n            })\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dataUtils.getFilteredData(countryInput, yearInput).then((elements) => {\r\n            setData(elements)\r\n        })\r\n    }, [countryInput, yearInput])\r\n\r\n    useEffect(() => {\r\n        if (data != null && data.length > 0) drawFaces()\r\n        setContainerDiv(document.getElementsByClassName('container')[0])\r\n    }, [data])\r\n\r\n    useEffect(() => {\r\n        if (containerDiv !== undefined) {\r\n            const debouncedResizeHandler = debounce(() => {\r\n                setDimension([containerDiv.clientWidth, containerDiv.clientHeight]);\r\n            }, 80);\r\n            window.addEventListener('resize', debouncedResizeHandler);\r\n        }\r\n\r\n    }, [containerDiv])\r\n\r\n    useEffect(() => {\r\n        drawFaces()\r\n    }, [dimension])\r\n\r\n\r\n    function debounce(fn, ms) {\r\n        let timer;\r\n        return _ => {\r\n            clearTimeout(timer);\r\n            timer = setTimeout(_ => {\r\n                timer = null;\r\n                fn.apply(this, arguments);\r\n            }, ms);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Funkcja rysująca twarz,\r\n     * brane pod uwagę są sex, age, suiciedes_no, population, suiciedes/100k pop\r\n     * @param data\r\n     */\r\n    async function drawFaces() {\r\n\r\n        const dynamicCanvas = canvasRef.current\r\n        if (dynamicCanvas == null) return null\r\n        const ctx = dynamicCanvas.getContext('2d')\r\n        dynamicCanvas.height = containerDiv.clientHeight;\r\n        dynamicCanvas.width = containerDiv.clientWidth;\r\n\r\n        ctx.clearRect(0, 0, dynamicCanvas.width, dynamicCanvas.height);\r\n\r\n        data.forEach((element, index) => {\r\n            let coordinates = getCoordinates(index, data.length, dynamicCanvas.width, dynamicCanvas.height)\r\n            drawFace(ctx,\r\n                /*x*/coordinates[0], /*y*/coordinates[1],\r\n                /*head*/getType(parameters[0], element.sex),\r\n                /*eyebrow*/getType(parameters[1], element.age),\r\n                /*eyes*/getType(parameters[2], element.suicides_no),\r\n                /*nose*/getType(parameters[3], element.population),\r\n                /*mouth*/getType(parameters[4], element.suicides_k_pop));\r\n        })\r\n\r\n        return ctx\r\n    }\r\n\r\n\r\n    /**\r\n     * zwraca pozycje do narysowania twarzy\r\n     * @param currentElementIndex - indeks aktualnie rysowanej twarzy\r\n     * @param allElementsLenght - liczba wszystkich twarzy do narysowania\r\n     * @param width - szerokość powierzchni rysowania\r\n     * @param height - wysokość powierzchni rysowania\r\n     * @returns {number[]}\r\n     */\r\n    function getCoordinates(currentElementIndex, allElementsLenght, width, height) {\r\n        const oneElementSize = [100, 100]\r\n        const elementsInRow = Math.round(width / (oneElementSize[0] + 20))\r\n        const rows = Math.ceil(allElementsLenght / elementsInRow)\r\n        let currentElement = currentElementIndex + 1\r\n        let iteratedElements = 1\r\n        for (let i = 1; i <= rows; i++) { //rows\r\n            for (let j = 1; j <= elementsInRow; j++) { //columns\r\n                if (iteratedElements === currentElement) {\r\n                    return [j * oneElementSize[0]-50, i * oneElementSize[1] - 80]\r\n                }\r\n                iteratedElements++\r\n            }\r\n        }\r\n        return [0, 0]\r\n    }\r\n\r\n    /**\r\n     * Funkcja rysująca jedną twarz.\r\n     * @param {CanvasRenderingContext2D} ctx\r\n     * @param {number} x - Współrzędna X na mapie.\r\n     * @param {number} y - Współrzędna Y na mapie.\r\n     * @param {number} headType - Typ twarzy (1, 2, 3).\r\n     * @param {number} eyebrowType - Typ brwi (1, 2, 3).\r\n     * @param {number} eyesType - Typ oczu (1, 2, 3).\r\n     * @param {number} noseType - Typ nosa (1, 2, 3).\r\n     * @param {number} mouthType - Typ ust (1, 2, 3).\r\n     */\r\n    function drawFace(ctx, x, y, headType, eyebrowType, eyesType, noseType, mouthType) {\r\n        ChernoffElements.drawHead(ctx, x, y, headType);\r\n        ChernoffElements.drawEyebrow(ctx, x, y, eyebrowType);\r\n        ChernoffElements.drawEyes(ctx, x, y, eyesType);\r\n        ChernoffElements.drawNose(ctx, x, y, noseType);\r\n        ChernoffElements.drawMouth(ctx, x, y, mouthType);\r\n    }\r\n\r\n\r\n    /**\r\n     * funkcja wyznacza numer przedziału do któej należy @parameterValue\r\n     * @param parameterName - nazwa kolumny ze zbioru danych\r\n     * @param parameterValue - wartość komórki w wybranej kolumnie oraz aktualnie przetwarzanym wierszu\r\n     */\r\n    function getType(parameterName, parameterValue) {\r\n        switch (parameterName) {\r\n            case /*sex*/\r\n            parameters[0]: {\r\n                if (parameterValue === 'male') return 1\r\n                else return 2\r\n            }\r\n            case /*age*/\r\n            parameters[1]: {\r\n                const age = dataUtils.parseAge(parameterValue)\r\n                if (age != null) {\r\n                    if (age.length === 2) {\r\n                        if (age[0] > 0 && age[1] < 25) return 2\r\n                        if (age[0] > 25 && age[1] < 55) return 1\r\n                    } else {\r\n                        return 3\r\n                    }\r\n                }\r\n                return 2\r\n            }\r\n            case /*suicides_no*/\r\n            parameters[2]: {\r\n                const sortedData = [...data].sort((a, b) => {\r\n                    if(Number(a.suicides_no) > Number(b.suicides_no)) return 1\r\n                    if(Number(a.suicides_no) < Number(b.suicides_no)) return -1\r\n                    else return 0\r\n                })\r\n                const middle = Math.ceil(sortedData.length / 2)\r\n                const quarter = Math.ceil(middle / 2)\r\n                if (parameterValue <= sortedData[quarter].suicides_no) return 3\r\n                if (parameterValue > sortedData[quarter].suicides_no && parameterValue <= sortedData[middle + quarter].suicides_no) return 1\r\n                if (parameterValue > sortedData[middle + quarter].suicides_no) return 2\r\n                return 3\r\n            }\r\n            case /*population*/\r\n            parameters[3]: {\r\n                const sortedData = [...data].sort((a, b) => {\r\n                    if(Number(a.population) > Number(b.population)) return 1\r\n                    if(Number(a.population) < Number(b.population)) return -1\r\n                    else return 0\r\n                })\r\n                const middle = Math.ceil(sortedData.length / 2)\r\n                const quarter = Math.ceil(middle / 2)\r\n                if (parameterValue <= sortedData[quarter].population) return 3\r\n                if (parameterValue > sortedData[quarter].population && parameterValue <= sortedData[middle + quarter].population) return 1\r\n                if (parameterValue > sortedData[middle + quarter].population) return 2\r\n                return 3\r\n            }\r\n            case /*suicides_k_pop*/\r\n            parameters[4]: {\r\n                const sortedData = [...data].sort((a, b) => {\r\n                    if(Number(a.suicides_k_pop) > Number(b.suicides_k_pop)) return 1\r\n                    if(Number(a.suicides_k_pop) < Number(b.suicides_k_pop)) return -1\r\n                    else return 0\r\n                })\r\n                const middle = Math.ceil(sortedData.length / 2)\r\n                const quarter = Math.ceil(middle / 2)\r\n                if (parameterValue <= sortedData[quarter].suicides_k_pop) return 3\r\n                if (parameterValue > sortedData[quarter].suicides_k_pop && parameterValue <= sortedData[middle + quarter].suicides_k_pop) return 1\r\n                if (parameterValue > sortedData[middle + quarter].suicides_k_pop) return 2\r\n                return 3\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"chernoff\"}>\r\n            {(allCountries && yearsByCountry && yearInput && countryInput) &&\r\n            <div className={\"container\"} style={{height: '500px'}}>\r\n                <div className={\"controls\"}>\r\n                    <div>\r\n                        <InputLabel id={\"selectLabel\"}>Choose country:</InputLabel>\r\n                        <Select\r\n                            labelId={\"selectLabel\"}\r\n                            value={countryInput}\r\n                            onChange={(event => setCountryInput(event.target.value))}\r\n                        >\r\n                            {allCountries.map(country => (\r\n                                <MenuItem key={country} value={country}>{country}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </div>\r\n                    <div>\r\n                        <InputLabel id={\"selectLabel\"}>Choose year:</InputLabel>\r\n                        <Select\r\n                            labelId={\"selectLabel\"}\r\n                            value={yearInput}\r\n                            onChange={(event => setYearInput(event.target.value))}\r\n                        >\r\n                            {yearsByCountry.map(year => (\r\n                                <MenuItem key={year} value={year}>{year}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </div>\r\n                </div>\r\n                <canvas className={\"canvas\"} ref={canvasRef}/>\r\n            </div>}\r\n            <ChernoffLegend getCoordinates={getCoordinates}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChernoffsFacesChart","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chernoffsFacesChart\\chernoffElements.js",["108","109","110","111","112"],"export const ChernoffElements = {\r\n    drawNose,\r\n    drawHead,\r\n    drawEyes,\r\n    drawMouth,\r\n    drawEyebrow\r\n}\r\n\r\n/**\r\n * Funkcja rysująca nos.\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {number} x - Współrzędna X w obrębie twarzy.\r\n * @param {number} y - Współrzędna Y w obrębie twarzy.\r\n * @param {number} type - 1, 2 lub 3\r\n */\r\nfunction drawNose(ctx, x, y, type) {\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x + 25, y + 20);\r\n    switch (type) {\r\n        case 1:\r\n            ctx.lineTo(x + 23, y + 25);\r\n            ctx.lineTo(x + 27, y + 25);\r\n            break;\r\n        case 2:\r\n            ctx.lineTo(x + 20, y + 25);\r\n            ctx.lineTo(x + 30, y + 25);\r\n            break;\r\n        case 3:\r\n            ctx.lineTo(x + 20, y + 32);\r\n            ctx.lineTo(x + 30, y + 32);\r\n            break;\r\n    }\r\n    ctx.lineTo(x + 25, y + 20);\r\n    ctx.stroke();\r\n}\r\n\r\n/**\r\n * Funkcja rysująca głowę.\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {number} x - Współrzędna X w obrębie twarzy.\r\n * @param {number} y - Współrzędna Y w obrębie twarzy.\r\n * @param {number} type - 1, 2 lub 3\r\n */\r\nfunction drawHead(ctx, x, y, type) {\r\n\r\n    switch (type) {\r\n        case 1:\r\n            drawEllipse(ctx, (x - /*width*/30 / 2.0) + 25, (y - 50 / 2.0) + 25, /*width*/30, 50);\r\n            break;\r\n        case 2:\r\n            drawEllipse(ctx, (x - /*width*/40 / 2.0) + 25, (y - 50 / 2.0) + 25, /*width*/40, 50);\r\n            break;\r\n        case 3:\r\n            drawEllipse(ctx, (x - /*width*/50 / 2.0) + 25, (y - 50 / 2.0) + 25, /*width*/50, 50);\r\n            break;\r\n    }\r\n}\r\n\r\n/**\r\n * Funkcja rysująca oczy.\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {number} x - Współrzędna X w obrębie twarzy.\r\n * @param {number} y - Współrzędna Y w obrębie twarzy.\r\n * @param {number} type - 1, 2 lub 3\r\n */\r\nfunction drawEyes(ctx, x, y, type) {\r\n\r\n    let size;\r\n    switch (type) {\r\n        case 1:\r\n            size = 6;\r\n            break;\r\n        case 2:\r\n            size = 10;\r\n            break;\r\n        case 3:\r\n            size = 15;\r\n            break;\r\n    }\r\n\r\n    drawEllipseByCenter(ctx, x + 15, y + 15, size, size);\r\n    drawEllipseByCenter(ctx, x + 35, y + 15, size, size);\r\n    drawEllipseByCenter(ctx, x + 15, y + 15, size - 5, size - 5);\r\n    drawEllipseByCenter(ctx, x + 35, y + 15, size - 5, size - 5);\r\n}\r\n\r\n/**\r\n * Funkcja rysująca usta.\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {number} x - Współrzędna X w obrębie twarzy.\r\n * @param {number} y - Współrzędna Y w obrębie twarzy.\r\n * @param {number} type - 1, 2 lub 3\r\n */\r\nfunction drawMouth(ctx, x, y, type) {\r\n\r\n    ctx.beginPath();\r\n    switch (type) {\r\n        case 3:\r\n            ctx.arc(x + 25, y + 25, 20, 0.25 * Math.PI, 0.75 * Math.PI);\r\n            break;\r\n        case 2:\r\n            ctx.moveTo(x + 15, y + 40);\r\n            ctx.lineTo(x + 35, y + 40);\r\n            break;\r\n        case 1:\r\n            ctx.arc(x + 25, y + 55, 20, 1.25 * Math.PI, 1.75 * Math.PI);\r\n            break;\r\n    }\r\n    ctx.lineWidth = 2;\r\n    ctx.stroke();\r\n}\r\n\r\n/**\r\n * Funkcja rysująca brwi.\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {number} x - Współrzędna X w obrębie twarzy.\r\n * @param {number} y - Współrzędna Y w obrębie twarzy.\r\n * @param {number} type - 1, 2 lub 3\r\n */\r\nfunction drawEyebrow(ctx, x, y, type) {\r\n\r\n    ctx.beginPath();\r\n    switch (type) {\r\n        case 1:\r\n            //lewa1\r\n            ctx.moveTo(x + 5, y + 15);\r\n            ctx.lineTo(x + 20, y + 5);\r\n            //prawa1\r\n            ctx.moveTo(x + 30, y + 5);\r\n            ctx.lineTo(x + 45, y + 15);\r\n            break;\r\n        case 2:\r\n            //lewa2\r\n            ctx.moveTo(x + 8, y + 8);\r\n            ctx.lineTo(x + 20, y + 8);\r\n            //prawa2\r\n            ctx.moveTo(x + 30, y + 8);\r\n            ctx.lineTo(x + 42, y + 8);\r\n            break;\r\n        case 3:\r\n            //lewa3\r\n            ctx.moveTo(x + 8, y + 5);\r\n            ctx.lineTo(x + 20, y + 8);\r\n            //prawa3\r\n            ctx.moveTo(x + 30, y + 8);\r\n            ctx.lineTo(x + 42, y + 5);\r\n            break;\r\n    }\r\n    ctx.lineWidth = 3;\r\n    ctx.stroke();\r\n}\r\n\r\n/**\r\n * Funkcja rysująca elipsę.\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {number} x - Współrzędna X środka elipsy.\r\n * @param {number} y - Współrzędna Y środka elipsy.\r\n * @param {number} w - Szerokość elipsy.\r\n * @param {number} h - Wysokość elipsy.\r\n */\r\nfunction drawEllipseByCenter(ctx, x, y, w, h) {\r\n\r\n    drawEllipse(ctx, x - w / 2.0, y - h / 2.0, w, h);\r\n}\r\n\r\n/**\r\n * Funkcja rysująca elipsę.\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {number} x - Współrzędna X elipsy.\r\n * @param {number} y - Współrzędna Y elipsy.\r\n * @param {number} w - Szerokość elipsy.\r\n * @param {number} h - Wysokość elipsy.\r\n */\r\nfunction drawEllipse(ctx, x, y, w, h) {\r\n\r\n    const kappa = .5522848,\r\n        ox = (w / 2) * kappa, // control point offset horizontal\r\n        oy = (h / 2) * kappa, // control point offset vertical\r\n        xe = x + w,           // x-end\r\n        ye = y + h,           // y-end\r\n        xm = x + w / 2,       // x-middle\r\n        ym = y + h / 2;       // y-middle\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x, ym);\r\n    ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\r\n    ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\r\n    ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\r\n    ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\r\n    ctx.lineWidth = 1;\r\n    ctx.stroke();\r\n}","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chartOne\\areaAgeChart.jsx",["113","114","115"],"import React, {useEffect, useState} from \"react\";\r\nimport {Area, AreaChart, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis} from \"recharts\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport \"./style.scss\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {progressBarActions} from \"../../redux/actions/progressBar.actions\";\r\n\r\n/**\r\n * Wyświetla diagram prezentujący zakres wieku w jakim ludzie umierali w określonym roku\r\n *\r\n * @param data - dane pobrane z pliku\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nconst AreaAgeChart = ({dataUtils}) => {\r\n\r\n    const maxAge = 100\r\n\r\n    const [allCountries, setAllCountries] = useState(null)\r\n    //kraj z którego wyświetlane są statystyki w tym wykresie\r\n    const [country, selectCountry] = useState(null)\r\n    const [specificData, setSpecificData] = useState()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (country != null) {\r\n            dispatch(progressBarActions.showProgressBar())\r\n            setSpecificData(getUpdatedData)\r\n        }\r\n    }, [country])\r\n\r\n    useEffect(() => {\r\n        dispatch(progressBarActions.hideProgressBar())\r\n    }, [specificData])\r\n\r\n    useEffect(() => {\r\n        dispatch(progressBarActions.showProgressBar())\r\n        dataUtils.getDistinctsAllCountires().then(data => {\r\n            setAllCountries(data)\r\n            selectCountry(data[0])\r\n            dispatch(progressBarActions.hideProgressBar())\r\n        })\r\n    }, [])\r\n\r\n    /**\r\n     * zwraca wiek od którego ludzie umierją w konkretnym roku (15-24 years, 75+ years)\r\n     *\r\n     * @param ageFromData - rekord z kolumny age z danych\r\n     */\r\n    function getStartAge(ageFromData) {\r\n        let indexOfDash = ageFromData.indexOf('-')\r\n        let result = 0\r\n        if (indexOfDash === -1) {\r\n            let indexOfAddSign = ageFromData.indexOf('+')\r\n            result = Number(ageFromData.substring(0, indexOfAddSign))\r\n        } else {\r\n            result = Number(ageFromData.substring(0, indexOfDash))\r\n        }\r\n        return result\r\n    }\r\n\r\n    function getEndAge(ageFromData) {\r\n        let indexOfDash = ageFromData.indexOf('-')\r\n        let result = 0\r\n        if (indexOfDash === -1) {\r\n            result = maxAge\r\n        } else {\r\n            let indexOfSpace = ageFromData.indexOf(' ')\r\n            result = Number(ageFromData.substring(indexOfDash + 1, indexOfSpace))\r\n        }\r\n        return result\r\n    }\r\n\r\n\r\n    /**\r\n     * zwraca wartość średnią początkowej wartości wieku w którym umierali ludzie\r\n     * z wybranego roku i kraju\r\n     * @param year\r\n     * @param country\r\n     */\r\n    function getAverageStartAge(year, country) {\r\n        let result = 0\r\n        const filteredData = dataUtils.data.filter(object => (\r\n            object.year === year && object.country === country\r\n        ))\r\n        filteredData.forEach(object => {\r\n            result = result + getStartAge(object.age)\r\n        })\r\n        return result / filteredData.length\r\n    }\r\n\r\n    function getAverageEndAge(year, country) {\r\n        let result = 0\r\n        const filteredData = dataUtils.data.filter(object => (\r\n            object.year === year && object.country === country\r\n        ))\r\n        filteredData.forEach(object => {\r\n            result = result + getEndAge(object.age)\r\n        })\r\n        return result / filteredData.length\r\n    }\r\n\r\n    function getUpdatedData() {\r\n        return dataUtils.data\r\n            .filter(object => (\r\n                object.country === country\r\n            ))\r\n            .map(object => {\r\n                return {\r\n                    year: object.year,\r\n                    ageRange: [\r\n                        getAverageStartAge(object.year, object.country),\r\n                        getAverageEndAge(object.year, object.country)\r\n                    ]\r\n                }\r\n            })\r\n            .sort(compare)\r\n    }\r\n\r\n    function compare(a, b) {\r\n        if (a.year > b.year) return 1\r\n        else if (b.year > a.year) return -1\r\n        return 0;\r\n    }\r\n\r\n    async function changeCountry(country) {\r\n        selectCountry(country)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"chartOne\"}>\r\n            {country &&\r\n            <div className={\"container\"}>\r\n                <div className={\"header\"}>\r\n                    <div className={\"selectClass\"}>\r\n                        <InputLabel id={\"selectLabel\"}>Choose country:</InputLabel>\r\n                        <Select\r\n                            labelId={\"selectLabel\"}\r\n                            value={country}\r\n                            onChange={(event => changeCountry(event.target.value))}\r\n                        >\r\n                            {allCountries.map(country => (\r\n                                <MenuItem key={country} value={country}>{country}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </div>\r\n                    <span className={\"chartTitle\"}>Sredni wiek osób podczas samobójstwa</span>\r\n                </div>\r\n                <div className={\"chartDiv\"}>\r\n                    <ResponsiveContainer width={\"95%\"} height={400}>\r\n                        <AreaChart\r\n                            data={specificData}\r\n                            margin={{\r\n                                top: 20, right: 20, bottom: 20, left: 20,\r\n                            }}>\r\n                            <XAxis dataKey={\"year\"} label={{value: 'Rok', angle: 0, position: 'bottom'}}/>\r\n                            <YAxis label={{value: 'Ilość', angle: -90, position: 'left'}}/>\r\n                            <Area name={\"Age range\"} dataKey=\"ageRange\" stroke=\"#8884d8\" fill=\"#8884d8\"/>\r\n                            <Tooltip/>\r\n                            <Legend  align={\"left\"}/>\r\n                        </AreaChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AreaAgeChart;","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\barChart\\myBarChart.jsx",["116","117","118","119"],"import \"./style.scss\"\r\nimport React, {useEffect, useState} from \"react\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, XAxis, YAxis} from \"recharts\";\r\nimport {Tooltip} from \"@material-ui/core\";\r\nimport {progressBarActions} from \"../../redux/actions/progressBar.actions\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n/**\r\n *\r\n * @param {DataUtils} dataLoader:\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nconst MyBarChart = ({dataUtils}) => {\r\n\r\n    const dataSubjects = ['suicides', 'population', 'suicides / 100k population']\r\n    const [countryInput, setCountryInput] = useState(null)\r\n    const [dataSubject, setDataSubject] = useState(dataSubjects[0])\r\n    const [allCountries, setAllCountries] = useState([])\r\n    const [yearsByCountry, setYearsByCountry] = useState([])\r\n    const [data, setData] = useState([])\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(progressBarActions.showProgressBar())\r\n        dataUtils.getDistinctsAllCountires().then((countries) => {\r\n            setCountryInput(countries[0])\r\n            setAllCountries(countries)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (countryInput != null) {\r\n            dataUtils.getDistinctAllYearsByCountry(countryInput).then((years) => {\r\n                setYearsByCountry(years)\r\n            })\r\n        }\r\n    }, [countryInput])\r\n\r\n    useEffect(() => {\r\n        let tmpData = []\r\n        switch (dataSubject) {\r\n            case dataSubjects[0]: {\r\n                yearsByCountry.forEach(value => {\r\n                    let tmp = dataUtils.getAllDeaths(countryInput, value)\r\n                    tmpData.push({\r\n                        name: value,\r\n                        value: tmp\r\n                    })\r\n                })\r\n                setData(tmpData)\r\n                break;\r\n            }\r\n            case dataSubjects[1]: {\r\n                yearsByCountry.forEach(value => {\r\n                    let tmp = dataUtils.getPopulationByCountryAndYear(countryInput, value)\r\n                    tmpData.push({\r\n                        name: value,\r\n                        value: tmp\r\n                    })\r\n                })\r\n                setData(tmpData)\r\n                break;\r\n            }\r\n            case dataSubjects[2]: {\r\n                yearsByCountry.forEach(value => {\r\n                    let tmp = dataUtils.getSuicides_100k_population(countryInput, value)\r\n                    tmpData.push({\r\n                        name: value,\r\n                        value: tmp\r\n                    })\r\n                })\r\n                setData(tmpData)\r\n                break;\r\n            }\r\n        }\r\n        dispatch(progressBarActions.hideProgressBar())\r\n    }, [yearsByCountry, dataSubject])\r\n\r\n\r\n    return (\r\n        <div className={\"barChart\"}>\r\n            {(countryInput && allCountries.length > 0 && dataSubject) &&\r\n            <div className={\"container\"}>\r\n                <div className={\"controls\"}>\r\n                    <div className={\"header\"}>\r\n                        <div>\r\n                            <InputLabel id={\"selectLabel\"}>Choose country:</InputLabel>\r\n                            <Select\r\n                                labelId={\"selectLabel\"}\r\n                                value={countryInput}\r\n                                onChange={(event => setCountryInput(event.target.value))}\r\n                            >\r\n                                {allCountries.map(country => (\r\n                                    <MenuItem key={country} value={country}>{country}</MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </div>\r\n                        <div>\r\n                            <InputLabel id={\"selectLabel1\"}>Choose data subject:</InputLabel>\r\n                            <Select\r\n                                labelId={\"selectLabel1\"}\r\n                                value={dataSubject}\r\n                                onChange={(event => setDataSubject(event.target.value))}\r\n                            >\r\n                                {dataSubjects.map(element => (\r\n                                    <MenuItem key={element} value={element}>{element}</MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </div>\r\n                        <span className={\"title\"}>Liczba określonego wskaźnika w każdym roku</span>\r\n                    </div>\r\n                </div>\r\n                <div className={\"chart\"}>\r\n                    <ResponsiveContainer width={\"95%\"} height={500}>\r\n                        <BarChart data={data}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <XAxis dataKey=\"name\"/>\r\n                            <YAxis/>\r\n                            <Tooltip/>\r\n                            <Legend/>\r\n                            <Bar dataKey=\"value\" fill=\"#8884d8\"/>\r\n                        </BarChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyBarChart","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\populationPyramidChart\\populationPyramidChart.jsx",["120","121"],"import \"./style.scss\"\r\nimport React, {useEffect, useState} from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {progressBarActions} from \"../../redux/actions/progressBar.actions\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nconst PopulationPyramidChart = ({dataUtils}) => {\r\n\r\n    const sex = ['male', 'female']\r\n    const [categories, setCategories] = useState([])\r\n    const [yearInput, setYearInput] = useState()\r\n    const [countryInput, setCountryInput] = useState()\r\n    const [allCountries, setAllCountries] = useState([])\r\n    const [yearsByCountry, setYearsByCountry] = useState([])\r\n    const [data, setData] = useState({\r\n        maleData: [],\r\n        femaleData: []\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(progressBarActions.showProgressBar())\r\n        const ranges = dataUtils.getAllAgeRangesAsString()\r\n        console.log(ranges)\r\n        setCategories(ranges)\r\n        dataUtils.getDistinctsAllCountires().then(countries => {\r\n            setAllCountries(countries)\r\n            const firstCountry = countries[0]\r\n            setCountryInput(firstCountry)\r\n            dataUtils.getDistinctAllYearsByCountry(firstCountry).then(years => {\r\n                setYearsByCountry(years)\r\n                setYearInput(years[0]);\r\n                dispatch(progressBarActions.hideProgressBar())\r\n            })\r\n        })\r\n    }, [])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        let tmpMaleData = []\r\n        let tmpFemaleData = []\r\n        categories.forEach(category => {\r\n            const malePopulation = dataUtils.getPopulation(countryInput, yearInput, sex[0], category)\r\n            const femalePopulation = dataUtils.getPopulation(countryInput, yearInput, sex[1], category)\r\n            tmpMaleData.push(-(Number(malePopulation))) //bo słupki idą w lewą stronę\r\n            tmpFemaleData.push(Number(femalePopulation))\r\n        })\r\n        setData({\r\n            maleData: tmpMaleData,\r\n            femaleData: tmpFemaleData\r\n        })\r\n    }, [categories, countryInput, yearInput]);\r\n\r\n\r\n    const options = {\r\n        chart: {\r\n            type: 'bar'\r\n        },\r\n        title: {\r\n            text: 'Population pyramid'\r\n        },\r\n        xAxis: [{\r\n            categories: categories,\r\n            reversed: false,\r\n            labels: {\r\n                step: 1\r\n            }\r\n        }, {\r\n            opposite: true,\r\n            reversed: false,\r\n            categories: categories,\r\n            linkedTo: 0,\r\n            labels: {\r\n                step: 1\r\n            }\r\n        }],\r\n        yAxis: {\r\n            title: {\r\n                text: null\r\n            },\r\n            labels: {\r\n                formatter: function () {\r\n                    return Math.abs(this.value) ;\r\n                }\r\n            }\r\n        },\r\n\r\n        plotOptions: {\r\n            series: {\r\n                stacking: 'normal'\r\n            }\r\n        },\r\n\r\n        tooltip: {\r\n            formatter: function () {\r\n                return '<b>' + this.series.name + ', age ' + this.point.category + '</b><br/>' +\r\n                    'Population: ' + Highcharts.numberFormat(Math.abs(this.point.y), 1);\r\n            }\r\n        },\r\n\r\n        series: [{\r\n            name: 'Male',\r\n            data: data.maleData\r\n        }, {\r\n            name: 'Female',\r\n            data: data.femaleData\r\n        }]\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"populationPyramidChart\"}>\r\n            {(countryInput && yearInput && data) &&\r\n            <div className={\"container\"}>\r\n                <div className={\"controls\"}>\r\n                    <div>\r\n                        <InputLabel id={\"selectLabel\"}>Choose country:</InputLabel>\r\n                        <Select\r\n                            labelId={\"selectLabel\"}\r\n                            value={countryInput}\r\n                            onChange={(event => setCountryInput(event.target.value))}\r\n                        >\r\n                            {allCountries.map(country => (\r\n                                <MenuItem key={country} value={country}>{country}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </div>\r\n                    <div>\r\n                        <InputLabel id={\"selectLabel\"}>Choose year:</InputLabel>\r\n                        <Select\r\n                            labelId={\"selectLabel\"}\r\n                            value={yearInput}\r\n                            onChange={(event => setYearInput(event.target.value))}\r\n                        >\r\n                            {yearsByCountry.map(year => (\r\n                                <MenuItem key={year} value={year}>{year}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </div>\r\n                </div>\r\n                <div className={\"chart\"}>\r\n                    <HighchartsReact\r\n                        highcharts={Highcharts}\r\n                        options={options}\r\n                    />\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PopulationPyramidChart","D:\\weaii\\magisterka\\semestr2\\Statystyka_w_informatyce\\data_analysis\\src\\components\\chernoffsFacesChart\\chernoffLegend.jsx",["122","123"],{"ruleId":"124","severity":1,"message":"125","line":4,"column":8,"nodeType":"126","messageId":"127","endLine":4,"endColumn":16},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"124","severity":1,"message":"132","line":5,"column":15,"nodeType":"126","messageId":"127","endLine":5,"endColumn":23},{"ruleId":"124","severity":1,"message":"133","line":5,"column":25,"nodeType":"126","messageId":"127","endLine":5,"endColumn":37},{"ruleId":"124","severity":1,"message":"134","line":21,"column":11,"nodeType":"126","messageId":"127","endLine":21,"endColumn":26},{"ruleId":"135","severity":1,"message":"136","line":43,"column":8,"nodeType":"137","endLine":43,"endColumn":14,"suggestions":"138"},{"ruleId":"135","severity":1,"message":"136","line":47,"column":8,"nodeType":"137","endLine":47,"endColumn":19,"suggestions":"139"},{"ruleId":"135","severity":1,"message":"140","line":32,"column":8,"nodeType":"137","endLine":32,"endColumn":14,"suggestions":"141"},{"ruleId":"124","severity":1,"message":"142","line":43,"column":45,"nodeType":"126","messageId":"127","endLine":43,"endColumn":64},{"ruleId":"135","severity":1,"message":"143","line":43,"column":8,"nodeType":"137","endLine":43,"endColumn":10,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":70,"column":101,"nodeType":"147","messageId":"148","endLine":70,"endColumn":103},{"ruleId":"145","severity":1,"message":"146","line":85,"column":97,"nodeType":"147","messageId":"148","endLine":85,"endColumn":99},{"ruleId":"145","severity":1,"message":"146","line":94,"column":97,"nodeType":"147","messageId":"148","endLine":94,"endColumn":99},{"ruleId":"145","severity":1,"message":"146","line":109,"column":101,"nodeType":"147","messageId":"148","endLine":109,"endColumn":103},{"ruleId":"145","severity":1,"message":"146","line":159,"column":88,"nodeType":"147","messageId":"148","endLine":159,"endColumn":90},{"ruleId":"145","severity":1,"message":"146","line":206,"column":30,"nodeType":"147","messageId":"148","endLine":206,"endColumn":32},{"ruleId":"135","severity":1,"message":"149","line":39,"column":8,"nodeType":"137","endLine":39,"endColumn":10,"suggestions":"150"},{"ruleId":"135","severity":1,"message":"151","line":45,"column":8,"nodeType":"137","endLine":45,"endColumn":33,"suggestions":"152"},{"ruleId":"135","severity":1,"message":"153","line":50,"column":8,"nodeType":"137","endLine":50,"endColumn":14,"suggestions":"154"},{"ruleId":"135","severity":1,"message":"153","line":64,"column":8,"nodeType":"137","endLine":64,"endColumn":19,"suggestions":"155"},{"ruleId":"156","severity":1,"message":"157","line":159,"column":9,"nodeType":"158","messageId":"159","endLine":220,"endColumn":10},{"ruleId":"156","severity":1,"message":"157","line":20,"column":5,"nodeType":"158","messageId":"159","endLine":33,"endColumn":6},{"ruleId":"156","severity":1,"message":"157","line":47,"column":5,"nodeType":"158","messageId":"159","endLine":57,"endColumn":6},{"ruleId":"156","severity":1,"message":"157","line":70,"column":5,"nodeType":"158","messageId":"159","endLine":80,"endColumn":6},{"ruleId":"156","severity":1,"message":"157","line":98,"column":5,"nodeType":"158","messageId":"159","endLine":109,"endColumn":6},{"ruleId":"156","severity":1,"message":"157","line":124,"column":5,"nodeType":"158","messageId":"159","endLine":149,"endColumn":6},{"ruleId":"135","severity":1,"message":"160","line":33,"column":8,"nodeType":"137","endLine":33,"endColumn":17,"suggestions":"161"},{"ruleId":"135","severity":1,"message":"136","line":37,"column":8,"nodeType":"137","endLine":37,"endColumn":22,"suggestions":"162"},{"ruleId":"135","severity":1,"message":"149","line":46,"column":8,"nodeType":"137","endLine":46,"endColumn":10,"suggestions":"163"},{"ruleId":"135","severity":1,"message":"149","line":34,"column":8,"nodeType":"137","endLine":34,"endColumn":10,"suggestions":"164"},{"ruleId":"135","severity":1,"message":"151","line":42,"column":8,"nodeType":"137","endLine":42,"endColumn":22,"suggestions":"165"},{"ruleId":"156","severity":1,"message":"157","line":46,"column":9,"nodeType":"158","messageId":"159","endLine":80,"endColumn":10},{"ruleId":"135","severity":1,"message":"166","line":82,"column":8,"nodeType":"137","endLine":82,"endColumn":37,"suggestions":"167"},{"ruleId":"135","severity":1,"message":"149","line":41,"column":8,"nodeType":"137","endLine":41,"endColumn":10,"suggestions":"168"},{"ruleId":"135","severity":1,"message":"169","line":58,"column":8,"nodeType":"137","endLine":58,"endColumn":45,"suggestions":"170"},{"ruleId":"124","severity":1,"message":"171","line":7,"column":11,"nodeType":"126","messageId":"127","endLine":7,"endColumn":29},{"ruleId":"124","severity":1,"message":"172","line":19,"column":15,"nodeType":"126","messageId":"127","endLine":19,"endColumn":24},"no-unused-vars","'MyAppBar' is defined but never used.","Identifier","unusedVar","no-native-reassign",["173"],"no-negated-in-lhs",["174"],"'GridList' is defined but never used.","'GridListTile' is defined but never used.","'getGridListCols' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["175"],["176"],"React Hook useEffect has missing dependencies: 'dataLoader', 'dispatch', and 'setData'. Either include them or remove the dependency array. If 'setData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["177"],"'onCancelInputWindow' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dataUtils', 'dispatch', and 'getColorScale'. Either include them or remove the dependency array.",["178"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'dataUtils' and 'dispatch'. Either include them or remove the dependency array.",["179"],"React Hook useEffect has a missing dependency: 'dataUtils'. Either include it or remove the dependency array.",["180"],"React Hook useEffect has a missing dependency: 'drawFaces'. Either include it or remove the dependency array.",["181"],["182"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'dispatch' and 'getUpdatedData'. Either include them or remove the dependency array.",["183"],["184"],["185"],["186"],["187"],"React Hook useEffect has missing dependencies: 'countryInput', 'dataSubjects', 'dataUtils', and 'dispatch'. Either include them or remove the dependency array.",["188"],["189"],"React Hook useEffect has missing dependencies: 'dataUtils' and 'sex'. Either include them or remove the dependency array.",["190"],"'numberOfProperties' is assigned a value but never used.","'container' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"193","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"193","fix":"210"},{"desc":"193","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"193","fix":"216"},{"desc":"217","fix":"218"},"Update the dependencies array to be: [data, dispatch]",{"range":"219","text":"220"},"Update the dependencies array to be: [dataUtils, dispatch]",{"range":"221","text":"222"},"Update the dependencies array to be: [dataLoader, dispatch, file, setData]",{"range":"223","text":"224"},"Update the dependencies array to be: [dataUtils, dispatch, getColorScale]",{"range":"225","text":"226"},{"range":"227","text":"222"},"Update the dependencies array to be: [countryInput, dataUtils, yearInput]",{"range":"228","text":"229"},"Update the dependencies array to be: [data, drawFaces]",{"range":"230","text":"231"},"Update the dependencies array to be: [dimension, drawFaces]",{"range":"232","text":"233"},"Update the dependencies array to be: [country, dispatch, getUpdatedData]",{"range":"234","text":"235"},"Update the dependencies array to be: [dispatch, specificData]",{"range":"236","text":"237"},{"range":"238","text":"222"},{"range":"239","text":"222"},"Update the dependencies array to be: [countryInput, dataUtils]",{"range":"240","text":"241"},"Update the dependencies array to be: [yearsByCountry, dataSubject, dispatch, dataSubjects, dataUtils, countryInput]",{"range":"242","text":"243"},{"range":"244","text":"222"},"Update the dependencies array to be: [categories, countryInput, dataUtils, sex, yearInput]",{"range":"245","text":"246"},[1390,1396],"[data, dispatch]",[1487,1498],"[dataUtils, dispatch]",[1265,1271],"[dataLoader, dispatch, file, setData]",[1709,1711],"[dataUtils, dispatch, getColorScale]",[1650,1652],[1811,1836],"[countryInput, dataUtils, yearInput]",[2003,2009],"[data, drawFaces]",[2410,2421],"[dimension, drawFaces]",[1152,1161],"[country, dispatch, getUpdatedData]",[1252,1266],"[dispatch, specificData]",[1561,1563],[1291,1293],[1518,1532],"[countryInput, dataUtils]",[2894,2923],"[yearsByCountry, dataSubject, dispatch, dataSubjects, dataUtils, countryInput]",[1607,1609],[2223,2260],"[categories, countryInput, dataUtils, sex, yearInput]"]